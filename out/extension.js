/*! For license information please see extension.js.LICENSE.txt */
(()=>{"use strict";var e={180:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Validator=t.ValidationSeverity=t.ValidationRuleType=void 0;const r=n(i(928)),o=n(i(896));var c,l;!function(e){e.REQUIRED="required",e.FORMAT="format",e.TYPE="type",e.RANGE="range",e.PATTERN="pattern",e.CUSTOM="custom",e.DEPENDENCY="dependency",e.UNIQUENESS="uniqueness"}(c=t.ValidationRuleType||(t.ValidationRuleType={})),function(e){e.ERROR="error",e.WARNING="warning",e.INFO="info"}(l=t.ValidationSeverity||(t.ValidationSeverity={})),t.Validator=class{constructor(){this.rules=[],this.customValidators=new Map,this.settings=this.loadSettings(),this.initializeDefaultRules()}loadSettings(){return{enableStrictMode:!0,enableWarnings:!0,enableSuggestions:!0,maxErrors:50}}initializeDefaultRules(){this.addRule({type:c.REQUIRED,severity:l.ERROR,field:"mcpServers",message:"MCP配置必须包含mcpServers字段",validator:e=>e&&"object"==typeof e&&"mcpServers"in e,suggestion:"添加mcpServers字段到配置根级别"}),this.addRule({type:c.PATTERN,severity:l.ERROR,field:"serviceId",message:"服务ID必须是有效的标识符",validator:e=>/^[a-zA-Z][a-zA-Z0-9_-]*$/.test(e),suggestion:"使用字母开头，只包含字母、数字、下划线和连字符的标识符"}),this.addRule({type:c.UNIQUENESS,severity:l.ERROR,field:"serviceId",message:"服务ID必须唯一",validator:(e,t)=>!t.configuration?.mcpServers||Object.keys(t.configuration.mcpServers).filter(t=>t===e).length<=1,suggestion:"使用不同的服务ID"}),this.addRule({type:c.REQUIRED,severity:l.ERROR,field:"command",message:"服务必须指定command字段",validator:e=>e&&"string"==typeof e.command&&e.command.trim().length>0,suggestion:"添加有效的command字段"}),this.addRule({type:c.CUSTOM,severity:l.WARNING,field:"command",message:"命令可能不存在或不可执行",validator:e=>!!e.command&&this.validateCommandExists(e.command),suggestion:"检查命令路径是否正确，或确保命令在PATH环境变量中"}),this.addRule({type:c.TYPE,severity:l.ERROR,field:"args",message:"args字段必须是字符串数组",validator:e=>!e.args||Array.isArray(e.args)&&e.args.every(e=>"string"==typeof e),suggestion:'确保args是字符串数组，例如: ["--option", "value"]'}),this.addRule({type:c.TYPE,severity:l.ERROR,field:"env",message:"env字段必须是字符串键值对对象",validator:e=>!e.env||"object"==typeof e.env&&!Array.isArray(e.env)&&Object.entries(e.env).every(([e,t])=>"string"==typeof e&&"string"==typeof t),suggestion:'确保env是对象，包含字符串键值对，例如: {"KEY": "value"}'}),this.addRule({type:c.PATTERN,severity:l.WARNING,field:"env",message:"环境变量名称应遵循命名约定",validator:e=>!e.env||Object.keys(e.env).every(e=>/^[A-Z][A-Z0-9_]*$/.test(e)),suggestion:"使用大写字母和下划线的环境变量名称，例如: API_KEY"}),this.addRule({type:c.TYPE,severity:l.ERROR,field:"disabled",message:"disabled字段必须是布尔值",validator:e=>void 0===e.disabled||"boolean"==typeof e.disabled,suggestion:"使用true或false作为disabled字段的值"}),this.addRule({type:c.CUSTOM,severity:l.WARNING,field:"cwd",message:"工作目录不存在",validator:e=>!e.cwd||o.existsSync(e.cwd),suggestion:"确保指定的工作目录存在"}),this.addRule({type:c.RANGE,severity:l.WARNING,field:"timeout",message:"超时设置应在合理范围内",validator:e=>{if(!e.timeout)return!0;const t=Number(e.timeout);return!isNaN(t)&&t>0&&t<=3e5},suggestion:"设置合理的超时时间（1-300000毫秒）"})}addRule(e){this.rules.push(e)}removeRule(e,t){this.rules=this.rules.filter(i=>!(i.field===e&&i.type===t))}addCustomValidator(e,t){this.customValidators.set(e,t)}validateConfiguration(e,t){const i=[],s={configuration:e,filePath:t};for(const t of this.rules)"mcpServers"!==t.field&&"serviceId"!==t.field||t.validator(e,s)||i.push(this.createValidationError(t,e,s));if(e.mcpServers)for(const[t,a]of Object.entries(e.mcpServers)){const e=this.validateService(t,a,s);i.push(...e)}const a=i.slice(0,this.settings.maxErrors);return{isValid:0===a.filter(e=>e.severity===l.ERROR).length,errors:a,warnings:a.filter(e=>e.severity===l.WARNING),suggestions:this.generateSuggestions(a)}}validateService(e,t,i){const s=[],a={...i,serviceId:e,configuration:i?.configuration||{mcpServers:{[e]:t}}};for(const t of this.rules)"serviceId"===t.field&&(t.validator(e,a)||s.push(this.createValidationError(t,e,a)));for(const e of this.rules)["command","args","env","disabled","cwd","timeout"].includes(e.field)&&(e.validator(t,a)||s.push(this.createValidationError(e,t,a)));return s}validateField(e,t,i){const s=[],a={...i,field:e,value:t};for(const i of this.rules)i.field===e&&(i.validator(t,a)||s.push(this.createValidationError(i,t,a)));return s}createValidationError(e,t,i){return{field:e.field,message:e.message,value:t,path:i.filePath}}validateCommandExists(e){try{if(r.isAbsolute(e))return o.existsSync(e);const{execSync:t}=i(317),s="win32"===process.platform?`where ${e}`:`which ${e}`;try{return t(s,{stdio:"ignore"}),!0}catch{return!1}}catch{return!1}}generateSuggestions(e){const t=[],i=new Set;for(const s of e)s.suggestion&&!i.has(s.suggestion)&&(t.push(s.suggestion),i.add(s.suggestion));if(e.some(e=>e.type===c.REQUIRED)){const e="确保所有必需字段都已填写";i.has(e)||t.push(e)}if(e.some(e=>e.type===c.FORMAT)){const e="检查字段格式是否符合要求";i.has(e)||t.push(e)}return t}quickValidate(e){if(!e||"object"!=typeof e)return!1;if(!e.mcpServers||"object"!=typeof e.mcpServers)return!1;for(const[t,i]of Object.entries(e.mcpServers)){if(!t||"string"!=typeof t)return!1;if(!i||"object"!=typeof i)return!1;if(!i.command||"string"!=typeof i.command)return!1}return!0}getRules(){return[...this.rules]}getRulesForField(e){return this.rules.filter(t=>t.field===e)}updateSettings(e){this.settings={...this.settings,...e}}getSettings(){return{...this.settings}}resetToDefaults(){this.rules=[],this.customValidators.clear(),this.initializeDefaultRules()}exportRules(){return{rules:this.rules.map(e=>({type:e.type,severity:e.severity,field:e.field,message:e.message,suggestion:e.suggestion})),settings:this.settings}}importRules(e){e.rules&&Array.isArray(e.rules)&&console.warn("导入验证规则时，validator函数需要重新定义"),e.settings&&this.updateSettings(e.settings)}}},216:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.NotificationManager=t.NotificationType=void 0;const r=n(i(398)),o=n(i(928));var c;!function(e){e.INFO="info",e.WARNING="warning",e.ERROR="error",e.SUCCESS="success"}(c=t.NotificationType||(t.NotificationType={})),t.NotificationManager=class{constructor(){this.activeNotifications=new Map,this.notificationHistory=[],this.settings=this.loadSettings()}loadSettings(){const e=r.workspace.getConfiguration("mcpManager.notifications");return{enableNotifications:e.get("enabled",!0),enableSounds:e.get("enableSounds",!0),autoHideTimeout:e.get("autoHideTimeout",5e3),maxHistorySize:e.get("maxHistorySize",100)}}async showNotification(e){if(!this.settings.enableNotifications)return{dismissed:!0};const t=this.generateNotificationId();try{let i;switch(e.type){case c.INFO:i=await r.window.showInformationMessage(e.message,{modal:e.modal},...e.actions||[]);break;case c.WARNING:i=await r.window.showWarningMessage(e.message,{modal:e.modal},...e.actions||[]);break;case c.ERROR:i=await r.window.showErrorMessage(e.message,{modal:e.modal},...e.actions||[]);break;case c.SUCCESS:i=await r.window.showInformationMessage(`✅ ${e.message}`,{modal:e.modal},...e.actions||[])}return this.addToHistory(t,e.type,e.message,i),{action:i,dismissed:!i}}catch(e){return console.error("显示通知时出错:",e),{dismissed:!0}}}async showProgress(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:e,cancellable:!1},t)}async showCancellableProgress(e,t){try{return await r.window.withProgress({location:r.ProgressLocation.Notification,title:e,cancellable:!0},t)}catch(e){if(e instanceof r.CancellationError)return;throw e}}async showFileDetectionNotification(e){const t=1===e.length?`发现MCP配置文件: ${o.basename(e[0].path)}`:`发现 ${e.length} 个MCP配置文件`;switch((await this.showNotification({type:c.INFO,message:t,actions:["导入","查看详情","忽略"]})).action){case"导入":return"import";case"查看详情":return"view";case"忽略":return"ignore";default:return}}async showServiceConflictNotification(e){const t=`检测到 ${e.length} 个服务冲突: ${e.join(", ")}`;switch((await this.showNotification({type:c.WARNING,message:t,actions:["覆盖","跳过","合并"]})).action){case"覆盖":return"overwrite";case"跳过":return"skip";case"合并":return"merge";default:return}}async showValidationErrorNotification(e){const t=`配置验证失败，发现 ${e.length} 个错误`;switch((await this.showNotification({type:c.ERROR,message:t,actions:["查看详情","忽略"]})).action){case"查看详情":return"fix";case"忽略":return"ignore";default:return}}async showBackupRestoreNotification(e){const t=`发现配置备份: ${o.basename(e)}`;switch((await this.showNotification({type:c.INFO,message:t,actions:["恢复","删除","保留"]})).action){case"恢复":return"restore";case"删除":return"delete";case"保留":return"keep";default:return}}async showImportSuccessNotification(e,t){const i=t===e?`成功导入 ${e} 个服务配置`:`导入完成: ${e}/${t} 个服务配置成功`;await this.showNotification({type:c.SUCCESS,message:i})}async showExportSuccessNotification(e){const t=`配置已导出到: ${o.basename(e)}`;switch((await this.showNotification({type:c.SUCCESS,message:t,actions:["打开文件","复制路径"]})).action){case"打开文件":return"open";case"复制路径":return"copy";default:return}}async showServiceStatusNotification(e,t){const i=`服务 "${e}" 已${t?"启用":"禁用"}`;await this.showNotification({type:c.INFO,message:i})}async showConfigFileChangeNotification(e){const t=`配置文件已被外部修改: ${o.basename(e)}`;switch((await this.showNotification({type:c.WARNING,message:t,actions:["重新加载","忽略"]})).action){case"重新加载":return"reload";case"忽略":return"ignore";default:return}}async showQuickInput(e,t,i){return r.window.showInputBox({placeHolder:e,value:t,validateInput:i})}async showQuickPick(e,t){return r.window.showQuickPick(e,t)}async showOpenDialog(e){return r.window.showOpenDialog(e)}async showSaveDialog(e){return r.window.showSaveDialog(e)}async showConfirmDialog(e,t="确认",i="取消"){return(await this.showNotification({type:c.WARNING,message:e,actions:[t,i],modal:!0})).action===t}showStatusBarMessage(e,t){return r.window.setStatusBarMessage(e,t||this.settings.autoHideTimeout)}generateNotificationId(){return`notification_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}addToHistory(e,t,i,s){this.notificationHistory.push({id:e,timestamp:Date.now(),type:t,message:i,action:s}),this.notificationHistory.length>this.settings.maxHistorySize&&this.notificationHistory.shift()}getNotificationHistory(){return[...this.notificationHistory]}clearHistory(){this.notificationHistory.length=0}updateSettings(e){this.settings={...this.settings,...e}}getSettings(){return{...this.settings}}dispose(){for(const e of this.activeNotifications.values())e.dispose();this.activeNotifications.clear(),this.notificationHistory.length=0}}},221:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigurationManager=void 0;const r=n(i(896)),o=n(i(928));t.ConfigurationManager=class{constructor(){this.configCache=new Map,this.encoding="utf8",this.currentConfigPath=void 0,this.currentConfig=void 0}async readConfig(e){try{if(this.configCache.has(e)){const t=this.configCache.get(e),i=await r.promises.stat(e);if(t.metadata?.lastModified===i.mtime.getTime())return t}const t=await r.promises.readFile(e,this.encoding),i=JSON.parse(t),s=await r.promises.stat(e);return i.metadata?i.metadata.lastModified=s.mtime.getTime():i.metadata={createdBy:"MCP配置管理器",createdAt:s.birthtime.getTime(),lastModified:s.mtime.getTime(),version:"1.0.0"},this.configCache.set(e,i),i}catch(e){throw new Error(`读取配置文件失败: ${e instanceof Error?e.message:String(e)}`)}}async writeConfig(e,t,i=!0){try{i&&await this.fileExists(e)&&await this.createBackup(e);const s=Date.now();t.metadata?t.metadata.lastModified=s:t.metadata={createdBy:"MCP配置管理器",createdAt:s,lastModified:s,version:"1.0.0"};const a=o.dirname(e);await r.promises.mkdir(a,{recursive:!0});const n=JSON.stringify(t,null,2);await r.promises.writeFile(e,n,this.encoding),this.configCache.set(e,t),console.log(`配置文件已保存: ${e}`)}catch(e){throw new Error(`写入配置文件失败: ${e instanceof Error?e.message:String(e)}`)}}async validateConfig(e){let t=e;return t||(t=await this.getConfig(),t)?this.validateConfigSync(t):{isValid:!1,errors:[{field:"config",message:"没有找到配置文件",value:void 0,path:""}],warnings:[]}}validateConfigSync(e){const t=[],i=[];return e.mcpServers?Object.entries(e.mcpServers).forEach(([e,s])=>{this.validateServiceConfig(e,s,t,i)}):t.push({field:"mcpServers",message:"mcpServers字段是必需的",value:e.mcpServers}),e.version&&!/^\d+\.\d+(\.\d+)?$/.test(e.version)&&i.push({field:"version",message:"版本号格式建议使用语义化版本（如1.0.0）",value:e.version,suggestion:"使用x.y.z格式的版本号"}),{isValid:0===t.length,errors:t,warnings:i}}validateServiceConfig(e,t,i,s){const a=`mcpServers.${e}`;if(t.command||i.push({field:`${a}.command`,message:"每个服务必须指定command字段",value:t.command}),t.args&&!Array.isArray(t.args))i.push({field:`${a}.args`,message:"args字段必须是字符串数组",value:t.args});else if(t.args){const e=t.args.filter(e=>"string"!=typeof e);e.length>0&&i.push({field:`${a}.args`,message:"args数组中的所有元素必须是字符串",value:e})}t.env&&"object"!=typeof t.env?i.push({field:`${a}.env`,message:"env字段必须是对象",value:t.env}):t.env&&Object.entries(t.env).forEach(([e,t])=>{"string"!=typeof t&&i.push({field:`${a}.env.${e}`,message:"环境变量值必须是字符串",value:t})}),void 0!==t.disabled&&"boolean"!=typeof t.disabled&&i.push({field:`${a}.disabled`,message:"disabled字段必须是布尔值",value:t.disabled}),t.metadata?.description||s.push({field:`${a}.metadata.description`,message:"建议为服务添加描述信息",suggestion:"在metadata中添加description字段"})}async getServices(e){try{const t=await this.readConfig(e),i=[];return Object.entries(t.mcpServers||{}).forEach(([e,t])=>{i.push({id:this.generateServiceId(e),name:e,...t,status:t.disabled?"inactive":"active"})}),i}catch(e){return console.error(`获取服务列表失败: ${e}`),[]}}async addService(e,t,i){try{let s;if(s=await this.fileExists(e)?await this.readConfig(e):{mcpServers:{},version:"1.0"},s.mcpServers[t])throw new Error(`服务 "${t}" 已存在`);i.metadata||(i.metadata={source:"manual",lastModified:Date.now()}),s.mcpServers[t]=i,await this.writeConfig(e,s)}catch(e){throw new Error(`添加服务失败: ${e instanceof Error?e.message:String(e)}`)}}async updateService(e,t,i){try{const s=await this.readConfig(e);if(!s.mcpServers[t])throw new Error(`服务 "${t}" 不存在`);i.metadata||(i.metadata=s.mcpServers[t].metadata||{}),i.metadata.lastModified=Date.now(),s.mcpServers[t]=i,await this.writeConfig(e,s)}catch(e){throw new Error(`更新服务失败: ${e instanceof Error?e.message:String(e)}`)}}async deleteService(e,t){try{const i=await this.readConfig(e);if(!i.mcpServers[t])throw new Error(`服务 "${t}" 不存在`);delete i.mcpServers[t],await this.writeConfig(e,i)}catch(e){throw new Error(`删除服务失败: ${e instanceof Error?e.message:String(e)}`)}}async removeService(e,t){return this.deleteService(e,t)}clearCache(e){e?this.configCache.delete(e):this.configCache.clear()}async fileExists(e){try{return await r.promises.access(e),!0}catch{return!1}}async createBackup(e){try{const t=`${e}.backup.${(new Date).toISOString().replace(/[:.]/g,"-")}`;await r.promises.copyFile(e,t),console.log(`已创建备份文件: ${t}`)}catch(e){console.warn(`创建备份失败: ${e}`)}}generateServiceId(e){return`service_${e.replace(/[^a-zA-Z0-9]/g,"_")}`}getConfigPath(){return this.currentConfigPath||void 0}getConfig(){return this.currentConfig||void 0}setCurrentConfigPath(e){this.currentConfigPath=e}setCurrentConfig(e){this.currentConfig=e}async updateConfig(e,t){const i=t||this.currentConfigPath;if(!i)throw new Error("没有指定配置文件路径");await this.writeConfig(i,e),this.setCurrentConfig(e)}}},264:(e,t)=>{var i;Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigMerger=t.MergeStrategy=void 0,function(e){e.OVERWRITE="overwrite",e.SKIP="skip",e.MERGE="merge",e.PROMPT="prompt"}(i=t.MergeStrategy||(t.MergeStrategy={})),t.ConfigMerger=class{constructor(e){this.configManager=e}async mergeConfigs(e,t,i){const s={success:!1,conflicts:[],errors:[],warnings:[],stats:{totalServices:0,addedServices:0,updatedServices:0,skippedServices:0,conflictServices:0}};try{const a={...t,mcpServers:{...t.mcpServers}};e.version&&(!t.version||this.compareVersions(e.version,t.version)>0)&&(a.version=e.version),i.preserveMetadata&&(a.metadata=this.mergeMetadata(e.metadata,t.metadata));const n=e.mcpServers||{};s.stats.totalServices=Object.keys(n).length;for(const[e,t]of Object.entries(n)){const n=await this.mergeService(e,t,a.mcpServers[e],i);n.conflict?(s.conflicts.push(n.conflict),s.stats.conflictServices++):"add"===n.action?(a.mcpServers[e]=n.config,s.stats.addedServices++):"update"===n.action?(a.mcpServers[e]=n.config,s.stats.updatedServices++):"skip"===n.action&&s.stats.skippedServices++,n.warnings&&s.warnings.push(...n.warnings)}if(i.validateResult){const e=await this.configManager.validateConfig(a);e.isValid||s.errors.push(...e.errors.map(e=>e.message)),e.warnings&&s.warnings.push(...e.warnings.map(e=>e.message))}s.config=a,s.success=0===s.errors.length}catch(e){s.errors.push(`合并配置失败: ${e instanceof Error?e.message:String(e)}`)}return s}async mergeMultipleConfigs(e,t){if(0===e.length)throw new Error("至少需要一个配置文件");if(1===e.length)return{success:!0,config:e[0],conflicts:[],errors:[],warnings:[],stats:{totalServices:Object.keys(e[0].mcpServers||{}).length,addedServices:0,updatedServices:0,skippedServices:0,conflictServices:0}};let i=e[0],s={success:!0,config:i,conflicts:[],errors:[],warnings:[],stats:{totalServices:0,addedServices:0,updatedServices:0,skippedServices:0,conflictServices:0}};for(let a=1;a<e.length;a++){const n=await this.mergeConfigs(e[a],i,t);n.success||(s.success=!1,s.errors.push(...n.errors)),s.conflicts.push(...n.conflicts),s.warnings.push(...n.warnings),s.stats.totalServices+=n.stats.totalServices,s.stats.addedServices+=n.stats.addedServices,s.stats.updatedServices+=n.stats.updatedServices,s.stats.skippedServices+=n.stats.skippedServices,s.stats.conflictServices+=n.stats.conflictServices,n.config&&(i=n.config)}return s.config=i,s}detectConflicts(e,t){const i=[],s=e.mcpServers||{},a=t.mcpServers||{};for(const[e,t]of Object.entries(s)){const s=a[e];if(s){const a=this.detectServiceConflict(e,t,s);a&&i.push(a)}}return i}analyzeDifferences(e,t){const i=Object.keys(e.mcpServers||{}),s=Object.keys(t.mcpServers||{}),a=i.filter(e=>!s.includes(e)),n=s.filter(e=>!i.includes(e)),r=i.filter(e=>s.includes(e)),o=[],c=[];for(const i of r){const s=e.mcpServers[i],a=t.mcpServers[i];this.areServicesEqual(s,a)?c.push(i):o.push(i)}return{onlyInFirst:a,onlyInSecond:n,different:o,identical:c}}async mergeService(e,t,s,a){if(!s)return{action:"add",config:{...t}};const n=this.detectServiceConflict(e,t,s);if(!n)return{action:"update",config:this.mergeServiceConfigs(t,s,a.preserveMetadata)};switch(a.strategy){case i.OVERWRITE:return{action:"update",config:{...t},warnings:[`服务 "${e}" 已被覆盖`]};case i.SKIP:return{action:"skip",warnings:[`跳过冲突的服务 "${e}"`]};case i.MERGE:return{action:"update",config:this.mergeServiceConfigs(t,s,a.preserveMetadata),warnings:[`强制合并服务 "${e}"，可能存在配置冲突`]};case i.PROMPT:default:return{action:"skip",conflict:n}}}detectServiceConflict(e,t,i){const s=[];return t.command!==i.command&&s.push("command"),this.areArraysEqual(t.args,i.args)||s.push("args"),this.areObjectsEqual(t.env,i.env)||s.push("env"),t.disabled!==i.disabled&&s.push("disabled"),0===s.length?null:{id:`conflict_${e}_${Date.now()}`,serviceName:e,type:"different-config",sourceConfig:t,targetConfig:i,description:`服务 "${e}" 在以下字段存在冲突: ${s.join(", ")}`,path:"",values:{source:t,target:i}}}mergeServiceConfigs(e,t,i){const s={...t,...e};return(e.env||t.env)&&(s.env={...t.env,...e.env}),i&&(s.metadata=this.mergeMetadata(e.metadata,t.metadata)),s}mergeMetadata(e,t){if(e||t)return{...t,...e,lastModified:Date.now()}}compareVersions(e,t){const i=e.split(".").map(Number),s=t.split(".").map(Number),a=Math.max(i.length,s.length);for(let e=0;e<a;e++){const t=i[e]||0,a=s[e]||0;if(t>a)return 1;if(t<a)return-1}return 0}areArraysEqual(e,t){return!e&&!t||!(!e||!t)&&e.length===t.length&&e.every((e,i)=>e===t[i])}areObjectsEqual(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;const i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every(i=>e[i]===t[i])}areServicesEqual(e,t){return e.command===t.command&&this.areArraysEqual(e.args,t.args)&&this.areObjectsEqual(e.env,t.env)&&e.disabled===t.disabled}}},265:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const r=n(i(398)),o=i(282),c=i(903),l=i(280),d=i(365),h=i(216),g=i(906),f=i(180),u=i(956),p=i(221),m=i(612),w=i(482),y=i(781);t.activate=function(e){console.log("MCP配置管理器插件正在激活...");const t=new p.ConfigurationManager,i=new m.FileDetector,s=new h.NotificationManager,a=new g.ErrorHandler(s),n=(new f.Validator,new u.FeedbackManager(s,a)),v=new l.FileWatcher(t,i),b=new d.AutoDetectionService(i,t),S=new o.MCPManagerProvider(e,t,i),C=new c.CommandManager(e,S,t,i),M=new w.ContextMenuProvider(e,t,i),_=new y.StatusBarProvider(t,i);e.subscriptions.push(r.window.registerWebviewViewProvider(o.MCPManagerProvider.viewType,S)),C.registerCommands(),function(e,t,i,s,a,n,o){const c=[r.commands.registerCommand("mcpManager.toggleAutoDetection",()=>{i.toggle()}),r.commands.registerCommand("mcpManager.triggerDetection",()=>i.triggerManualDetection()),r.commands.registerCommand("mcpManager.clearDetectionHistory",()=>{i.clearHistory()}),r.commands.registerCommand("mcpManager.showNotificationHistory",()=>{0===s.getNotificationHistory().length?s.showNotification({type:h.NotificationType.INFO,message:"暂无通知历史记录"}):r.commands.executeCommand("mcpManager.openPanel")}),r.commands.registerCommand("mcpManager.clearNotificationHistory",()=>{s.clearHistory()}),r.commands.registerCommand("mcpManager.showErrorHistory",()=>{r.window.showInformationMessage("错误历史功能暂未实现")}),r.commands.registerCommand("mcpManager.clearErrorHistory",()=>{r.window.showInformationMessage("清除错误历史功能暂未实现")}),r.commands.registerCommand("mcpManager.validateConfiguration",async e=>{try{r.window.showInformationMessage("配置验证功能暂未实现")}catch(e){r.window.showErrorMessage("验证失败: 配置验证过程中发生错误")}}),r.commands.registerCommand("mcpManager.quickValidate",async()=>{try{r.window.showInformationMessage("快速验证功能暂未实现")}catch(e){r.window.showErrorMessage("验证失败: 快速验证过程中发生错误")}}),r.commands.registerCommand("mcpManager.showFeedbackHistory",()=>{const e=o.getFeedbackHistory().map(e=>`${new Date(e.timestamp).toLocaleString()} - ${e.type}: ${e.title} (${e.userAction})`).join("\n");r.workspace.openTextDocument({content:`反馈历史:\n\n${e}`,language:"plaintext"}).then(e=>r.window.showTextDocument(e))}),r.commands.registerCommand("mcpManager.clearFeedbackHistory",()=>{o.clearFeedbackHistory(),o.showSuccess("历史清除","反馈历史已清除")}),r.commands.registerCommand("mcpManager.showUsageStatistics",()=>{const e=o.getUsageStatistics();if(!e)return void o.showInfo("统计信息","使用统计功能未启用");const t=`使用统计:\n\n总交互次数: ${e.totalInteractions}\n平均响应时间: ${e.averageResponseTime}ms\n\n交互类型分布:\n${Object.entries(e.interactionsByType).map(([e,t])=>`- ${e}: ${t}`).join("\n")}\n\n常见操作:\n${Object.entries(e.mostCommonActions).map(([e,t])=>`- ${e}: ${t}`).join("\n")}`;r.workspace.openTextDocument({content:t,language:"plaintext"}).then(e=>r.window.showTextDocument(e))})];e.subscriptions.push(...c)}(e,0,b,s,0,0,n),M.register(),r.workspace.getConfiguration("mcpManager").get("autoDetection.enabled",!0)&&b.start(),e.subscriptions.push(v,b,s,a,n,_),_.show(),console.log("MCP配置管理器插件激活完成")},t.deactivate=function(){console.log("MCP配置管理器插件正在停用...")}},273:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JsonParser=void 0;class i{constructor(){this.maxDepth=10,this.maxSize=10485760}parseConfig(e,t=!1){try{if(e.length>this.maxSize)throw new Error(`JSON文件过大，超过${this.maxSize/1024/1024}MB限制`);const i=this.preprocessJson(e,t),s=JSON.parse(i);return this.validateDepth(s,0),this.convertToMCPConfig(s)}catch(e){if(e instanceof SyntaxError)throw new Error(`JSON语法错误: ${e.message}`);throw e}}stringify(e,t=2){try{return JSON.stringify(e,this.jsonReplacer,t)}catch(e){throw new Error(`序列化JSON失败: ${e instanceof Error?e.message:String(e)}`)}}parseClipboard(e){try{const t=e.trim();if(t.startsWith("{")&&t.includes("mcpServers"))return{config:this.parseConfig(t,!1)};if(t.startsWith("[")){const e=JSON.parse(t);if(Array.isArray(e))return{services:e.filter(e=>this.isValidServiceConfig(e))}}if(t.startsWith("{")){const e=JSON.parse(t);if(this.isValidServiceConfig(e))return{services:[e]}}const i=this.parseServiceObject(t);return i?{services:Object.values(i)}:{error:"无法识别的配置格式"}}catch(e){return{error:`解析失败: ${e instanceof Error?e.message:String(e)}`}}}validateJson(e){const t=[],i=[];try{JSON.parse(e),this.checkCommonIssues(e,t,i)}catch(i){i instanceof SyntaxError&&t.push({field:"json",message:`JSON语法错误: ${i.message}`,value:e.substring(0,100)+"..."})}return{isValid:0===t.length,errors:t,warnings:i}}fixCommonIssues(e){let t=e;return t=this.removeComments(t),t=this.fixTrailingCommas(t),t=this.fixSingleQuotes(t),t=this.fixUnquotedKeys(t),t}preprocessJson(e,t){let i=e.trim();return t||(i=this.fixCommonIssues(i)),i}validateDepth(e,t){if(t>this.maxDepth)throw new Error(`对象嵌套深度超过限制(${this.maxDepth})`);if("object"==typeof e&&null!==e)for(const i of Object.values(e))this.validateDepth(i,t+1)}convertToMCPConfig(e){if(e.mcpServers)return e;if("object"==typeof e&&!Array.isArray(e)&&Object.values(e).some(e=>"object"==typeof e&&null!==e&&(e.command||e.args||e.env)))return{mcpServers:e,version:"1.0"};throw new Error("无法识别的配置格式，请确保包含mcpServers字段")}isValidServiceConfig(e){return"object"==typeof e&&null!==e&&(e.command||e.args||e.env)}parseServiceObject(e){try{const t=JSON.parse(e);if("object"==typeof t&&!Array.isArray(t)&&Object.values(t).every(e=>this.isValidServiceConfig(e)))return t}catch{}return null}checkCommonIssues(e,t,i){/,\s*[}\]]/.test(e)&&i.push({field:"format",message:"发现尾随逗号，可能导致解析错误",suggestion:"移除多余的逗号"}),(/'[^']*'\s*:/.test(e)||/:\s*'[^']*'/.test(e))&&i.push({field:"format",message:"发现单引号，JSON标准要求使用双引号",suggestion:"将单引号替换为双引号"}),(/\/\//.test(e)||/\/\*[\s\S]*?\*\//.test(e))&&i.push({field:"format",message:"发现注释，标准JSON不支持注释",suggestion:"移除注释内容"})}removeComments(e){let t=e.replace(/\/\/.*$/gm,"");return t=t.replace(/\/\*[\s\S]*?\*\//g,""),t}fixTrailingCommas(e){return e.replace(/,\s*([}\]])/g,"$1")}fixSingleQuotes(e){return e.replace(/'/g,'"')}fixUnquotedKeys(e){return e.replace(/([{,]\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\s*:/g,'$1"$2":')}jsonReplacer(e,t){return void 0===t?null:"function"==typeof t?t.toString():t}}t.JsonParser=i,t.default=i},280:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FileWatcher=void 0;const r=n(i(398)),o=n(i(928)),c=n(i(896));t.FileWatcher=class{constructor(e,t){this.watchers=new Map,this.autoDetectionEnabled=!0,this.detectionInterval=null,this.lastDetectionTime=0,this.DETECTION_COOLDOWN=5e3,this.AUTO_DETECTION_INTERVAL=3e4,this.configManager=e,this.fileDetector=t,this.initializeWatchers()}initializeWatchers(){this.watchWorkspaceFiles(),this.watchConfigurationFiles(),this.startAutoDetection()}watchWorkspaceFiles(){if(r.workspace.workspaceFolders)for(const e of r.workspace.workspaceFolders){const t=new r.RelativePattern(e,"**/*.json"),i=r.workspace.createFileSystemWatcher(t);i.onDidCreate(e=>{this.handleFileChange(e,"created")}),i.onDidChange(e=>{this.handleFileChange(e,"changed")}),i.onDidDelete(e=>{this.handleFileChange(e,"deleted")}),this.watchers.set(e.uri.fsPath,i)}}watchConfigurationFiles(){const e=this.getKnownConfigPaths();for(const t of e)c.existsSync(t)&&this.watchSpecificFile(t)}watchSpecificFile(e){const t=new r.RelativePattern(o.dirname(e),o.basename(e)),i=r.workspace.createFileSystemWatcher(t);i.onDidChange(()=>{this.handleConfigFileChange(e)}),i.onDidDelete(()=>{this.handleConfigFileDeleted(e)}),this.watchers.set(e,i)}async handleFileChange(e,t){const i=e.fsPath;if(!this.isPotentialMCPFile(i))return;const s=Date.now();if(!(s-this.lastDetectionTime<this.DETECTION_COOLDOWN)){this.lastDetectionTime=s;try{switch(t){case"created":await this.handleFileCreated(i);break;case"changed":await this.handleFileModified(i);break;case"deleted":await this.handleFileDeleted(i)}}catch(e){console.error(`处理文件变化时出错: ${i}`,e)}}}async handleFileCreated(e){const t=await this.fileDetector.detectSingleFile(e);t&&t.confidence>.7&&"导入配置"===await r.window.showInformationMessage(`检测到新的MCP配置文件: ${o.basename(e)}`,"导入配置","忽略")&&await this.importDetectedFile(e,t)}async handleFileModified(e){const t=await this.configManager.getConfig();if(this.isKnownConfigFile(e,t))"重新加载"===await r.window.showWarningMessage(`配置文件已被外部修改: ${o.basename(e)}`,"重新加载","忽略")&&await this.reloadConfiguration();else{const t=await this.fileDetector.detectSingleFile(e);t&&t.confidence>.8&&"导入配置"===await r.window.showInformationMessage(`文件修改后检测为MCP配置: ${o.basename(e)}`,"导入配置","忽略")&&await this.importDetectedFile(e,t)}}async handleFileDeleted(e){const t=await this.configManager.getConfig();this.isKnownConfigFile(e,t)&&r.window.showWarningMessage(`配置文件已被删除: ${o.basename(e)}`,"确定")}async handleConfigFileChange(e){"重新加载"===await r.window.showInformationMessage(`MCP配置文件已更新: ${o.basename(e)}`,"重新加载","忽略")&&await this.reloadConfiguration()}async handleConfigFileDeleted(e){r.window.showErrorMessage(`MCP配置文件已被删除: ${o.basename(e)}`)}startAutoDetection(){this.detectionInterval&&clearInterval(this.detectionInterval),this.detectionInterval=setInterval(async()=>{this.autoDetectionEnabled&&await this.performAutoDetection()},this.AUTO_DETECTION_INTERVAL)}async performAutoDetection(){try{if(!r.workspace.workspaceFolders)return;const e=(await this.fileDetector.detectFiles({searchPaths:r.workspace.workspaceFolders?.map(e=>e.uri.fsPath)||[]})).files.filter(e=>e.confidence>.8&&!this.isKnownConfigFile(e.path));e.length>0&&"查看详情"===await r.window.showInformationMessage(`自动检测到 ${e.length} 个新的MCP配置文件`,"查看详情","忽略")&&r.commands.executeCommand("mcpManager.detectFiles")}catch(e){console.error("自动检测时出错:",e)}}async importDetectedFile(e,t){try{const i=c.readFileSync(e,"utf8"),s=JSON.parse(i),a=this.extractServicesFromConfig(s,t);Object.keys(a).length>0&&(await this.configManager.updateConfig({mcpServers:a}),r.window.showInformationMessage(`成功导入 ${Object.keys(a).length} 个服务配置`))}catch(e){r.window.showErrorMessage(`导入配置文件失败: ${e instanceof Error?e.message:"未知错误"}`)}}extractServicesFromConfig(e,t){const i={};if("claude_desktop"===t.type&&e.mcpServers)for(const[t,s]of Object.entries(e.mcpServers)){const e=s;i[t]={command:e.command||"",args:e.args||[],env:e.env||{},disabled:e.disabled||!1}}else if("cline"===t.type&&e.mcpServers)for(const[t,s]of Object.entries(e.mcpServers)){const e=s;i[t]={command:e.command||"",args:e.args||[],env:e.env||{},disabled:e.disabled||!1}}else if("custom"===t.type&&e.servers)for(const[t,s]of Object.entries(e.servers)){const e=s;i[t]={command:e.command||"",args:e.args||[],env:e.env||{},disabled:e.disabled||!1}}return i}isPotentialMCPFile(e){const t=o.basename(e).toLowerCase();return".json"===o.extname(e).toLowerCase()&&["claude_desktop_config","cline_mcp_settings","mcp_config","mcp_servers","mcp-config","mcp-servers"].some(e=>t.includes(e))}isKnownConfigFile(e,t){return!!t&&this.getKnownConfigPaths().includes(e)}getKnownConfigPaths(){const e=[],t=i(857).homedir();if(e.push(o.join(t,"Library","Application Support","Claude","claude_desktop_config.json"),o.join(t,".config","claude","claude_desktop_config.json")),e.push(o.join(t,".cline","mcp_settings.json"),o.join(t,".config","cline","mcp_settings.json")),r.workspace.workspaceFolders)for(const t of r.workspace.workspaceFolders)e.push(o.join(t.uri.fsPath,".mcp","config.json"),o.join(t.uri.fsPath,"mcp-config.json"),o.join(t.uri.fsPath,".vscode","mcp.json"));return e}async reloadConfiguration(){try{await this.configManager.readConfig(""),r.window.showInformationMessage("配置已重新加载")}catch(e){r.window.showErrorMessage(`重新加载配置失败: ${e instanceof Error?e.message:"未知错误"}`)}}setAutoDetectionEnabled(e){this.autoDetectionEnabled=e,e&&!this.detectionInterval?this.startAutoDetection():!e&&this.detectionInterval&&(clearInterval(this.detectionInterval),this.detectionInterval=null)}async triggerDetection(){await this.performAutoDetection()}addFileWatch(e){this.watchers.has(e)||this.watchSpecificFile(e)}removeFileWatch(e){const t=this.watchers.get(e);t&&(t.dispose(),this.watchers.delete(e))}getWatchStatus(){return{watchedFiles:Array.from(this.watchers.keys()),autoDetectionEnabled:this.autoDetectionEnabled,lastDetectionTime:this.lastDetectionTime}}dispose(){for(const e of this.watchers.values())e.dispose();this.watchers.clear(),this.detectionInterval&&(clearInterval(this.detectionInterval),this.detectionInterval=null)}}},282:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MCPManagerProvider=void 0;const r=n(i(398)),o=i(273),c=i(264);class l{constructor(e,t,i){this._disposables=[],this._context=e,this._configManager=t,this._fileDetector=i,this._jsonParser=new o.JsonParser,this._configMerger=new c.ConfigMerger(t)}resolveWebviewView(e,t,i){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._context.extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),this._disposables.push(e.webview.onDidReceiveMessage(async e=>{await this._handleMessage(e)})),this._disposables.push(e.onDidChangeVisibility(()=>{e.visible&&this._refreshData()})),this._refreshData()}async show(){this._view?(this._view.show?.(!0),await this._refreshData()):await r.commands.executeCommand("mcp-config-manager.mcpManagerView.focus")}async refresh(){await this._refreshData()}async postMessage(e){return!!this._view&&this._view.webview.postMessage(e)}async _handleMessage(e){try{let t;switch(e.type){case"getServices":t=await this._handleGetServices(e);break;case"addService":t=await this._handleAddService(e.payload);break;case"editService":t=await this._handleUpdateService(e.payload);break;case"deleteService":t=await this._handleDeleteService(e.payload);break;case"updateConfig":t=await this._handleUpdateConfig(e.payload);break;case"mergeConfigs":t=await this._handleMergeConfigs(e.payload);break;case"detectFiles":t=await this._handleDetectFiles(e.payload);break;case"validateConfig":t=await this._handleValidateConfig(e.payload);break;case"importSettings":t=await this._handleImportFromClipboard(e.payload);break;case"exportConfig":t=await this._handleExportConfig(e.payload);break;default:t={id:e.id,type:"error",success:!1,data:{error:`未知的消息类型: ${e.type}`}}}await this.postMessage(t)}catch(t){console.error("处理WebView消息失败:",t);const i={id:e.id,type:"error",success:!1,data:{error:t instanceof Error?t.message:String(t)}};await this.postMessage(i)}}async _handleGetServices(e){const t=await this._configManager.getConfig(),i=t?.mcpServers||{};return{id:e.id,type:"servicesLoaded",success:!0,data:i}}async _handleAddService(e){return await this._configManager.addService(e.filePath,e.serviceName,e.serviceConfig),{id:e.id,type:"serviceAdded",success:!0,data:{serviceName:e.serviceName}}}async _handleUpdateService(e){return await this._configManager.updateService(e.filePath,e.serviceName,e.serviceConfig),{id:e.id,type:"serviceUpdated",success:!0,data:{serviceName:e.serviceName}}}async _handleDeleteService(e){return await this._configManager.removeService(e.filePath||"",e.serviceName),{id:e.id,type:"serviceDeleted",success:!0,data:{serviceName:e.serviceName}}}async _handleGetConfig(e){const t=await this._configManager.getConfig(),i=this._configManager.getConfigPath();return{id:e.id,type:"configLoaded",success:!0,data:{config:t,configPath:i}}}async _handleUpdateConfig(e){return await this._configManager.updateConfig(e.config,e.filePath),{id:e.id,type:"configUpdated",success:!0,data:{message:"配置已更新"}}}async _handleMergeConfigs(e){const t=await this._configManager.readConfig(e.sourcePaths[0]),i=await this._configManager.readConfig(e.targetPath),s=await this._configMerger.mergeConfigs(t,i,{strategy:"merge",preserveMetadata:!0,createBackup:!0,validateResult:!0});return{id:e.id,type:"configsMerged",success:!0,data:s}}async _handleDetectFiles(e){const t=await this._fileDetector.detectFiles({searchPaths:[e.workspacePath],excludePatterns:[],maxDepth:5,includeHidden:!1,followSymlinks:!1,maxFileSize:1048576});return{id:e.id,type:"filesDetected",success:!0,data:t}}async _handleValidateConfig(e){const t=e.config||await this._configManager.getConfig();if(!t)throw new Error("没有可验证的配置");const i=await this._configManager.validateConfig(t);return{id:e.id,type:"configValidated",success:!0,data:i}}async _handleImportFromClipboard(e){const t=e.content||await r.env.clipboard.readText();if(!t.trim())throw new Error("内容为空");const i=this._jsonParser.parseClipboard(t);return{id:e.id,type:"settingsImported",success:!0,data:i}}async _handleExportConfig(e){const t=e.config||await this._configManager.getConfig();if(!t)throw new Error("没有可导出的配置");const i=JSON.stringify(t,null,2);return await r.env.clipboard.writeText(i),{id:e.id,type:"configExported",success:!0}}async _refreshData(){if(this._view)try{const e=await this._configManager.getConfig(),t=this._configManager.getConfigPath(),i=await this._fileDetector.detectFiles(),s=r.workspace.getConfiguration("mcp-config-manager"),a={autoDetect:s.get("autoDetect",!0),fileWatcher:s.get("fileWatcher",!0),autoBackup:s.get("autoBackup",!0),backupRetentionDays:s.get("backupRetentionDays",7),defaultMergeStrategy:s.get("defaultMergeStrategy","prompt"),detectionPaths:s.get("detectionPaths",[]),excludePatterns:s.get("excludePatterns",[]),validationLevel:s.get("validationLevel","normal"),showNotifications:s.get("showNotifications",!0),debugMode:s.get("debugMode",!1),theme:s.get("theme","auto"),language:s.get("language","zh-CN")};await this.postMessage({type:"initialize",data:{config:e,configPath:t,detectedFiles:i,settings:a}})}catch(e){console.error("刷新WebView数据失败:",e)}}_getHtmlForWebview(e){const t=e.asWebviewUri(r.Uri.joinPath(this._context.extensionUri,"out","webview.js")),i=e.asWebviewUri(r.Uri.joinPath(this._context.extensionUri,"out","webview.css")),s=this._getNonce();return`<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${s}';">\n    <link href="${i}" rel="stylesheet">\n    <title>MCP配置管理器</title>\n</head>\n<body>\n    <div id="root"></div>\n    <script nonce="${s}" src="${t}"><\/script>\n</body>\n</html>`}_getNonce(){let e="";for(let t=0;t<32;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}dispose(){this._disposables.forEach(e=>e.dispose()),this._disposables=[]}}t.MCPManagerProvider=l,l.viewType="mcp-config-manager.mcpManagerView",t.default=l},317:e=>{e.exports=require("child_process")},365:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.AutoDetectionService=void 0;const r=n(i(398)),o=n(i(928)),c=n(i(896));t.AutoDetectionService=class{constructor(e,t){this.detectionTimer=null,this.isRunning=!1,this.lastScanTime=0,this.detectionHistory=new Map,this.fileDetector=e,this.configManager=t,this.settings=this.loadSettings(),this.statusBarItem=r.window.createStatusBarItem(r.StatusBarAlignment.Right,100),this.initializeStatusBar()}loadSettings(){const e=r.workspace.getConfiguration("mcpManager.autoDetection");return{enabled:e.get("enabled",!0),interval:e.get("interval",3e4),minConfidence:e.get("minConfidence",.7),watchPaths:e.get("watchPaths",this.getDefaultWatchPaths()),excludePatterns:e.get("excludePatterns",["**/node_modules/**","**/dist/**","**/build/**","**/.git/**","**/tmp/**","**/temp/**"]),notifyOnNewFiles:e.get("notifyOnNewFiles",!0),autoImport:e.get("autoImport",!1),deepScan:e.get("deepScan",!1),maxFileSize:e.get("maxFileSize",1048576)}}getDefaultWatchPaths(){const e=[],t=i(857).homedir();if(e.push(o.join(t,"Library","Application Support","Claude"),o.join(t,".config","claude"),o.join(t,".cline"),o.join(t,".config","cline"),o.join(t,".mcp")),r.workspace.workspaceFolders)for(const t of r.workspace.workspaceFolders)e.push(t.uri.fsPath);return e.filter(e=>c.existsSync(e))}initializeStatusBar(){this.statusBarItem.command="mcpManager.toggleAutoDetection",this.updateStatusBar(),this.statusBarItem.show()}updateStatusBar(){this.isRunning?(this.statusBarItem.text="$(search) MCP自动检测",this.statusBarItem.tooltip="MCP自动检测正在运行\n点击切换状态",this.statusBarItem.backgroundColor=void 0):(this.statusBarItem.text="$(search-stop) MCP检测已停止",this.statusBarItem.tooltip="MCP自动检测已停止\n点击启动",this.statusBarItem.backgroundColor=new r.ThemeColor("statusBarItem.warningBackground"))}start(){!this.isRunning&&this.settings.enabled&&(this.isRunning=!0,this.scheduleNextDetection(),this.updateStatusBar(),r.window.showInformationMessage("MCP自动检测已启动"))}stop(){this.isRunning&&(this.isRunning=!1,this.detectionTimer&&(clearTimeout(this.detectionTimer),this.detectionTimer=null),this.updateStatusBar(),r.window.showInformationMessage("MCP自动检测已停止"))}toggle(){this.isRunning?this.stop():this.start()}scheduleNextDetection(){this.isRunning&&(this.detectionTimer=setTimeout(async()=>{await this.performDetection(),this.scheduleNextDetection()},this.settings.interval))}async performDetection(){try{const e=Date.now();this.lastScanTime=e,this.statusBarItem.text="$(loading~spin) MCP扫描中...";const t=await this.scanForMCPFiles(),i=this.filterNewFiles(t);i.length>0&&await this.handleNewFiles(i),this.updateDetectionHistory(t);const s=Date.now()-e;console.log(`MCP自动检测完成，耗时: ${s}ms，发现 ${i.length} 个新文件`)}catch(e){console.error("自动检测时出错:",e),r.window.showErrorMessage(`MCP自动检测失败: ${e instanceof Error?e.message:"未知错误"}`)}finally{this.updateStatusBar()}}async scanForMCPFiles(){const e=[];for(const t of this.settings.watchPaths)if(c.existsSync(t))try{const i=await this.scanDirectory(t);e.push(...i)}catch(e){console.error(`扫描目录失败: ${t}`,e)}return e.filter(e=>e.confidence>=this.settings.minConfidence)}async scanDirectory(e){const t=[];try{const i=await this.getFilesToScan(e);for(const e of i)try{if(c.statSync(e).size>this.settings.maxFileSize)continue;const i=await this.fileDetector.detectSingleFile(e);i&&i.confidence>=this.settings.minConfidence&&t.push(i)}catch(t){console.error(`检测文件失败: ${e}`,t)}}catch(t){console.error(`扫描目录失败: ${e}`,t)}return t}async getFilesToScan(e){const t=[],i=async(e,s=0)=>{if(!(s>(this.settings.deepScan?10:3)))try{const a=c.readdirSync(e,{withFileTypes:!0});for(const n of a){const a=o.join(e,n.name);this.isExcluded(a)||(n.isDirectory()?await i(a,s+1):n.isFile()&&this.isJsonFile(n.name)&&t.push(a))}}catch(t){console.error(`读取目录失败: ${e}`,t)}};return await i(e),t}isExcluded(e){const t=o.relative(process.cwd(),e);return this.settings.excludePatterns.some(e=>new RegExp(e.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*").replace(/\?/g,"[^/]")).test(t))}isJsonFile(e){return".json"===o.extname(e).toLowerCase()}filterNewFiles(e){return e.filter(e=>{const t=this.detectionHistory.get(e.path);return!t||t.confidence<e.confidence})}async handleNewFiles(e){e.sort((e,t)=>t.confidence-e.confidence);const t=e.filter(e=>e.confidence>=.9);e.filter(e=>e.confidence>=.7&&e.confidence<.9),this.settings.autoImport&&t.length>0&&await this.autoImportFiles(t),this.settings.notifyOnNewFiles&&await this.notifyNewFiles(e)}async autoImportFiles(e){let t=0;for(const i of e)try{await this.importConfigFile(i)&&t++}catch(e){console.error(`自动导入文件失败: ${i.path}`,e)}t>0&&r.window.showInformationMessage(`自动导入了 ${t} 个MCP配置文件`)}async notifyNewFiles(e){const t=1===e.length?`发现新的MCP配置文件: ${o.basename(e[0].path)}`:`发现 ${e.length} 个新的MCP配置文件`;switch(await r.window.showInformationMessage(t,"查看详情","导入全部","忽略")){case"查看详情":r.commands.executeCommand("mcpManager.detectFiles");break;case"导入全部":await this.importAllFiles(e)}}async importAllFiles(e){let t=0,i=0;for(const s of e)try{await this.importConfigFile(s)?t++:i++}catch(e){i++,console.error(`导入文件失败: ${s.path}`,e)}const s=`导入完成: ${t} 成功, ${i} 失败`;i>0?r.window.showWarningMessage(s):r.window.showInformationMessage(s)}async importConfigFile(e){try{const t=c.readFileSync(e.path,"utf8"),i=JSON.parse(t),s=this.extractServices(i,e.type);if(Object.keys(s).length>0){const e=await this.configManager.readConfig(""),t={...e,mcpServers:{...e.mcpServers,...s}};return await this.configManager.updateConfig(t,""),!0}}catch(t){console.error(`导入配置文件失败: ${e.path}`,t)}return!1}extractServices(e,t){const i={};switch(t){case"claude_desktop":case"cline":if(e.mcpServers)return e.mcpServers;break;case"custom":if(e.servers)for(const[t,s]of Object.entries(e.servers)){const e=s;i[t]={id:t,name:t,command:e.command||"",args:e.args||[],env:e.env||{},disabled:e.disabled||!1}}}return i}updateDetectionHistory(e){for(const t of e)this.detectionHistory.set(t.path,t);const t=Date.now()-6048e5;for(const[e,i]of this.detectionHistory.entries())new Date(i.lastModified).getTime()<t&&this.detectionHistory.delete(e)}updateSettings(e){this.settings={...this.settings,...e},!this.settings.enabled&&this.isRunning&&this.stop(),this.settings.enabled&&!this.isRunning&&this.start()}getStatistics(){return{isRunning:this.isRunning,lastScanTime:this.lastScanTime,detectedFiles:this.detectionHistory.size,watchedPaths:this.settings.watchPaths,settings:this.settings}}async triggerManualDetection(){const e=await this.scanForMCPFiles(),t=this.filterNewFiles(e);return t.length>0&&await this.handleNewFiles(t),this.updateDetectionHistory(e),e}clearHistory(){this.detectionHistory.clear(),r.window.showInformationMessage("检测历史已清理")}dispose(){this.stop(),this.statusBarItem.dispose(),this.detectionHistory.clear()}}},398:e=>{e.exports=require("vscode")},482:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ContextMenuProvider=void 0;const r=n(i(398)),o=n(i(928)),c=i(273);class l{constructor(e,t,i){this._disposables=[],this._context=e,this._configManager=t,this._fileDetector=i,this._jsonParser=new c.JsonParser}register(){this._disposables.push(r.commands.registerCommand("mcp-config-manager.addServiceFromFile",this.addServiceFromFile.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.openConfigFile",this.openConfigFile.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.validateConfigFile",this.validateConfigFile.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.importConfigFile",this.importConfigFile.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.createConfigFile",this.createConfigFile.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.detectMCPFiles",this.detectMCPFiles.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.addServiceFromClipboard",this.addServiceFromClipboard.bind(this))),this._disposables.push(r.commands.registerCommand("mcp-config-manager.exportToClipboard",this.exportToClipboard.bind(this)))}async addServiceFromFile(e){try{let t;if(e)t=e.fsPath;else{const e=await r.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{JSON文件:["json"],所有文件:["*"]},title:"选择要添加为服务的文件"});if(!e||0===e.length)return;t=e[0].fsPath}try{await r.workspace.fs.stat(r.Uri.file(t))}catch{return void r.window.showErrorMessage(`文件不存在: ${t}`)}const i=await r.workspace.fs.readFile(r.Uri.file(t)),s=Buffer.from(i).toString("utf8");let a;try{const e=this._jsonParser.parseClipboard(s);if(e.services&&e.services.length>0)a=e.services[0];else{if(!e.config)return void r.window.showErrorMessage("无法解析文件内容为有效的MCP配置");{const t=e.config.mcpServers||{},i=Object.keys(t);if(0===i.length)return void r.window.showErrorMessage("文件中没有找到有效的MCP服务配置");if(i.length>1){const e=await r.window.showQuickPick(i.map(e=>({label:e,description:t[e].command||"无命令",detail:t[e].args?.join(" ")||"无参数"})),{title:"选择要添加的服务",placeHolder:"文件包含多个服务，请选择一个"});if(!e)return;a=t[e.label]}else a=t[i[0]]}}}catch(e){return void r.window.showErrorMessage(`解析文件失败: ${e instanceof Error?e.message:String(e)}`)}if(!a)return void r.window.showErrorMessage("未能提取有效的服务配置");const n=o.basename(t,o.extname(t)).replace(/[^a-zA-Z0-9_-]/g,"_"),c=await r.window.showInputBox({title:"输入服务ID",prompt:"为新服务输入一个唯一的ID",value:n,validateInput:e=>e.trim()?/^[a-zA-Z0-9_-]+$/.test(e)?null:"服务ID只能包含字母、数字、下划线和连字符":"服务ID不能为空"});if(!c)return;const l=await this._configManager.getConfig();if(l?.mcpServers?.[c]&&"覆盖"!==await r.window.showWarningMessage(`服务ID "${c}" 已存在，是否覆盖？`,"覆盖","取消"))return;const d=this._configManager.getConfigPath()||"mcp.json";await this._configManager.addService(d,c,a),r.window.showInformationMessage(`成功添加服务 "${c}"`,"打开配置管理器").then(e=>{"打开配置管理器"===e&&r.commands.executeCommand("mcp-config-manager.openPanel")})}catch(e){console.error("从文件添加服务失败:",e),r.window.showErrorMessage(`添加服务失败: ${e instanceof Error?e.message:String(e)}`)}}async openConfigFile(e){try{let t;if(e)t=e.fsPath;else{const e=this._configManager.getConfigPath();if(!e)return void r.window.showErrorMessage("没有找到配置文件路径");t=e}try{await r.workspace.fs.stat(r.Uri.file(t))}catch{return void("创建文件"===await r.window.showWarningMessage(`配置文件不存在: ${t}`,"创建文件","取消")&&await this.createConfigFile(r.Uri.file(o.dirname(t))))}const i=await r.workspace.openTextDocument(t);await r.window.showTextDocument(i)}catch(e){console.error("打开配置文件失败:",e),r.window.showErrorMessage(`打开配置文件失败: ${e instanceof Error?e.message:String(e)}`)}}async validateConfigFile(e){try{let t;if(e)t=e.fsPath;else{const e=this._configManager.getConfigPath();if(!e)return void r.window.showErrorMessage("没有找到配置文件路径");t=e}try{await r.workspace.fs.stat(r.Uri.file(t))}catch{return void r.window.showErrorMessage(`文件不存在: ${t}`)}const i=await r.workspace.fs.readFile(r.Uri.file(t)),s=Buffer.from(i).toString("utf8");try{const e=this._jsonParser.parseConfig(s),t=await this._configManager.validateConfig(e);if(t.isValid)r.window.showInformationMessage(`配置文件验证通过 ✓\n服务数量: ${Object.keys(e.mcpServers||{}).length}`);else{const e=t.errors?.length||0,i=t.warnings?.length||0;r.window.showWarningMessage(`配置文件验证失败\n错误: ${e} 个\n警告: ${i} 个`,"查看详情").then(e=>{"查看详情"===e&&this.showValidationDetails(t)})}}catch(e){r.window.showErrorMessage(`配置文件格式错误: ${e instanceof Error?e.message:String(e)}`)}}catch(e){console.error("验证配置文件失败:",e),r.window.showErrorMessage(`验证失败: ${e instanceof Error?e.message:String(e)}`)}}async importConfigFile(e){try{let t;if(e)t=e.fsPath;else{const e=await r.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{JSON文件:["json"],所有文件:["*"]},title:"选择要导入的配置文件"});if(!e||0===e.length)return;t=e[0].fsPath}const i=await r.workspace.fs.readFile(r.Uri.file(t)),s=Buffer.from(i).toString("utf8"),a=this._jsonParser.parseConfig(s),n=await this._configManager.getConfig();if(n&&Object.keys(n.mcpServers||{}).length>0){const e=await r.window.showWarningMessage("当前已有配置，如何处理导入的配置？","合并配置","覆盖配置","取消");if("取消"===e)return;if("合并配置"===e)return r.commands.executeCommand("mcp-config-manager.openPanel"),void r.window.showInformationMessage("请在配置管理器中使用合并功能来合并配置文件")}await this._configManager.updateConfig(a);const o=Object.keys(a.mcpServers||{}).length;r.window.showInformationMessage(`成功导入配置文件\n导入了 ${o} 个服务`,"打开配置管理器").then(e=>{"打开配置管理器"===e&&r.commands.executeCommand("mcp-config-manager.openPanel")})}catch(e){console.error("导入配置文件失败:",e),r.window.showErrorMessage(`导入失败: ${e instanceof Error?e.message:String(e)}`)}}async createConfigFile(e){try{let t;if(e)t=(await r.workspace.fs.stat(e)).type===r.FileType.Directory?e.fsPath:o.dirname(e.fsPath);else{const e=r.workspace.workspaceFolders;if(!e||0===e.length)return void r.window.showErrorMessage("没有打开的工作区");t=e[0].uri.fsPath}const i=await r.window.showInputBox({title:"创建配置文件",prompt:"输入配置文件名",value:"mcp-config.json",validateInput:e=>e.trim()?e.endsWith(".json")?null:"文件名必须以.json结尾":"文件名不能为空"});if(!i)return;const s=o.join(t,i);try{if(await r.workspace.fs.stat(r.Uri.file(s)),"覆盖"!==await r.window.showWarningMessage(`文件 "${i}" 已存在，是否覆盖？`,"覆盖","取消"))return}catch{}const a={mcpServers:{},$schema:"https://raw.githubusercontent.com/modelcontextprotocol/servers/main/src/mcp/server/schema.json"},n=JSON.stringify(a,null,2);await r.workspace.fs.writeFile(r.Uri.file(s),Buffer.from(n,"utf8"));const c=await r.workspace.openTextDocument(s);await r.window.showTextDocument(c),r.window.showInformationMessage(`成功创建配置文件: ${i}`,"打开配置管理器").then(e=>{"打开配置管理器"===e&&r.commands.executeCommand("mcp-config-manager.openPanel")})}catch(e){console.error("创建配置文件失败:",e),r.window.showErrorMessage(`创建失败: ${e instanceof Error?e.message:String(e)}`)}}async detectMCPFiles(e){try{let t;if(e){const i=await r.workspace.fs.stat(e);t=i.type===r.FileType.Directory?e.fsPath:o.dirname(e.fsPath)}else{const e=r.workspace.workspaceFolders;if(!e||0===e.length)return void r.window.showErrorMessage("没有打开的工作区");t=e[0].uri.fsPath}await r.window.withProgress({location:r.ProgressLocation.Notification,title:"检测MCP配置文件",cancellable:!1},async e=>{e.report({message:"正在扫描文件..."});const i=await this._fileDetector.detectFiles({searchPaths:[t],maxDepth:5,includeHidden:!1});if(e.report({message:"检测完成"}),0===i.files.length)r.window.showInformationMessage(`在 "${o.basename(t)}" 中未检测到MCP配置文件`,"创建配置文件").then(e=>{"创建配置文件"===e&&this.createConfigFile(r.Uri.file(t))});else{const e=i.files.filter(e=>e.isValid),t=`检测到 ${i.files.length} 个文件，其中 ${e.length} 个有效`;r.window.showInformationMessage(t,"查看详情","打开配置管理器").then(e=>{"查看详情"===e?this.showDetectionResults(i.files):"打开配置管理器"===e&&r.commands.executeCommand("mcp-config-manager.openPanel")})}})}catch(e){console.error("检测MCP文件失败:",e),r.window.showErrorMessage(`检测失败: ${e instanceof Error?e.message:String(e)}`)}}async addServiceFromClipboard(){try{const e=await r.env.clipboard.readText();if(!e.trim())return void r.window.showWarningMessage("剪贴板为空");const t=this._jsonParser.parseClipboard(e);if(t.services&&1===t.services.length){const e=t.services[0],i=await r.window.showInputBox({title:"输入服务ID",prompt:"为新服务输入一个唯一的ID",validateInput:e=>e.trim()?/^[a-zA-Z0-9_-]+$/.test(e)?null:"服务ID只能包含字母、数字、下划线和连字符":"服务ID不能为空"});if(!i)return;const s=this._configManager.getConfigPath()||"mcp.json";await this._configManager.addService(s,i,e),r.window.showInformationMessage(`成功添加服务 "${i}"`)}else if(t.config){const e=t.config.mcpServers||{},i=Object.keys(e);if(0===i.length)return void r.window.showWarningMessage("剪贴板中的配置没有包含任何服务");const s=this._configManager.getConfigPath()||"mcp.json";for(const t of i)await this._configManager.addService(s,t,e[t]);r.window.showInformationMessage(`成功从剪贴板导入 ${i.length} 个服务`)}else t.error?r.window.showWarningMessage(`解析失败: ${t.error}`):r.window.showWarningMessage("剪贴板内容格式不正确或无法解析")}catch(e){console.error("从剪贴板添加服务失败:",e),r.window.showErrorMessage(`添加失败: ${e instanceof Error?e.message:String(e)}`)}}async exportToClipboard(){try{const e=await this._configManager.getConfig();if(!e||0===Object.keys(e.mcpServers||{}).length)return void r.window.showWarningMessage("没有可导出的配置");const t=JSON.stringify(e,null,2);await r.env.clipboard.writeText(t);const i=Object.keys(e.mcpServers||{}).length;r.window.showInformationMessage(`已将配置复制到剪贴板\n包含 ${i} 个服务`)}catch(e){console.error("导出到剪贴板失败:",e),r.window.showErrorMessage(`导出失败: ${e instanceof Error?e.message:String(e)}`)}}async showValidationDetails(e){const t=[];e.errors&&e.errors.forEach((e,i)=>{t.push({label:`❌ 错误 ${i+1}`,description:e.message,detail:e.path||""})}),e.warnings&&e.warnings.forEach((e,i)=>{t.push({label:`⚠️ 警告 ${i+1}`,description:e.message,detail:e.path||""})}),t.length>0&&await r.window.showQuickPick(t,{title:"验证结果详情",placeHolder:"选择查看详细信息"})}async showDetectionResults(e){const t=e.map(e=>({label:e.name,description:e.isValid?"✓ 有效":"✗ 无效",detail:e.path,picked:e.isValid})),i=await r.window.showQuickPick(t,{title:"检测到的MCP配置文件",placeHolder:"选择要打开的文件",canPickMany:!1});if(i){const e=await r.workspace.openTextDocument(i.detail);await r.window.showTextDocument(e)}}dispose(){this._disposables.forEach(e=>e.dispose()),this._disposables=[]}}t.ContextMenuProvider=l,t.default=l},612:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FileDetector=void 0;const r=n(i(398)),o=n(i(896)),c=n(i(928)),l=i(273);t.FileDetector=class{constructor(){this.defaultOptions={searchPaths:[],excludePatterns:["**/node_modules/**","**/.*/**","**/*.backup.*","**/*.tmp","**/*.log"],maxDepth:5,includeHidden:!1,followSymlinks:!1,maxFileSize:10485760},this.jsonParser=new l.JsonParser}async detectFiles(e){const t={...this.defaultOptions,...e},i={files:[],recommendations:[],errors:[],stats:{totalScanned:0,validConfigs:0,invalidConfigs:0,skippedFiles:0}};try{const e=await this.getSearchPaths(t.searchPaths);for(const s of e)await this.scanDirectory(s,t,i,0);i.recommendations=await this.generateRecommendations(i.files)}catch(e){i.errors.push(`检测过程中发生错误: ${e instanceof Error?e.message:String(e)}`)}return i}async detectSingleFile(e){try{const t=await o.promises.stat(e);if(t.size>this.defaultOptions.maxFileSize)return null;if(!this.isJsonFile(e))return null;const i=await o.promises.readFile(e,"utf8"),s=this.calculateConfidence(e,i);if(0===s)return null;let a,n,r=!1;try{a=this.jsonParser.parseConfig(i,!1),r=!0}catch(e){n=e instanceof Error?e.message:String(e)}const l=this.determineFileType(e,i);return{path:e,name:c.basename(e),type:"mcp_config"===l?"mcp.json":"settings.json",app:"unknown",hasServers:!!a?.mcpServers&&Object.keys(a.mcpServers).length>0,serverCount:a?.mcpServers?Object.keys(a.mcpServers).length:0,size:t.size,lastModified:t.mtime.toISOString(),confidence:s,detectedApp:"unknown",preview:i.substring(0,200),isValid:r}}catch(e){return null}}watchFiles(e,t){const i=[];for(const s of e){const e=new r.RelativePattern(s,"**/*.json"),a=r.workspace.createFileSystemWatcher(e);a.onDidCreate(e=>{this.detectSingleFile(e.fsPath).then(i=>{i&&i.confidence>.5&&t("created",e.fsPath)})}),a.onDidChange(e=>{this.detectSingleFile(e.fsPath).then(i=>{i&&i.confidence>.5&&t("changed",e.fsPath)})}),a.onDidDelete(e=>{t("deleted",e.fsPath)}),i.push(a)}return i}async getRecommendedLocations(){const e=[],t=r.workspace.workspaceFolders;if(!t)return e;for(const i of t){const t=i.uri.fsPath,s=[c.join(t,"mcp.json"),c.join(t,".mcp.json"),c.join(t,"config","mcp.json"),c.join(t,".config","mcp.json"),c.join(t,"src","mcp.json"),c.join(t,"configs","mcp.json")];for(const t of s)await this.fileExists(t)&&e.push(t)}return e}async scanDirectory(e,t,i,s){if(!(s>=t.maxDepth))try{const a=await o.promises.readdir(e,{withFileTypes:!0});for(const n of a){const a=c.join(e,n.name);if(this.shouldExclude(a,t.excludePatterns))i.stats.skippedFiles++;else if(t.includeHidden||!n.name.startsWith(".")){if(n.isDirectory())await this.scanDirectory(a,t,i,s+1);else if(n.isFile()||n.isSymbolicLink()&&t.followSymlinks){i.stats.totalScanned++;const e=await this.detectSingleFile(a);e&&(i.files.push(e),e.isValid?i.stats.validConfigs++:i.stats.invalidConfigs++)}}else i.stats.skippedFiles++}}catch(t){i.errors.push(`扫描目录 ${e} 失败: ${t instanceof Error?t.message:String(t)}`)}}async getSearchPaths(e){const t=[];t.push(...e);const i=r.workspace.workspaceFolders;if(i)for(const e of i)t.push(e.uri.fsPath);const s=[...new Set(t)],a=[];for(const e of s)await this.directoryExists(e)&&a.push(e);return a}calculateConfidence(e,t){let i=0;const s=c.basename(e).toLowerCase();"mcp.json"===s?i+=.4:s.includes("mcp")?i+=.2:"config.json"!==s&&"configuration.json"!==s||(i+=.1),t.includes("mcpServers")&&(i+=.5),t.includes("command")&&t.includes("args")&&(i+=.2),i+=.05*["mcp","server","protocol","claude","anthropic"].filter(e=>t.toLowerCase().includes(e)).length;try{const e=JSON.parse(t);"object"==typeof e&&null!==e&&(i+=.1,e.mcpServers&&"object"==typeof e.mcpServers&&(i+=.3))}catch{i*=.5}return Math.min(i,1)}determineFileType(e,t){try{const e=JSON.parse(t);if(e.mcpServers&&"object"==typeof e.mcpServers)return"mcp_config";if("object"==typeof e&&null!==e&&Object.values(e).some(e=>"object"==typeof e&&null!==e&&(e.command||e.args||e.env)))return"partial_config"}catch{}return"unknown"}async generateRecommendations(e){const t=[],i=e.sort((e,t)=>t.confidence-e.confidence),s=i.find(e=>e.isValid&&e.confidence>.7);s&&t.push({type:"import",filePath:s.path,message:"这是最可能的主要MCP配置文件",action:"use_as_primary"});const a=i.filter(e=>e.isValid&&e.confidence>.5&&e!==s);for(const e of a)t.push({type:"merge",filePath:e.path,message:"此文件包含可能需要合并的MCP配置",action:"consider_merge"});const n=e.filter(e=>!e.isValid&&e.confidence>.3);for(const e of n)t.push({type:"update",filePath:e.path,message:"文件可能是MCP配置但存在错误",action:"fix_errors"});return t}shouldExclude(e,t){return t.some(t=>new RegExp(t.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*").replace(/\?/g,"[^/]")).test(e))}isJsonFile(e){return".json"===c.extname(e).toLowerCase()}async fileExists(e){try{return await o.promises.access(e),!0}catch{return!1}}async directoryExists(e){try{return(await o.promises.stat(e)).isDirectory()}catch{return!1}}}},781:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StatusBarProvider=void 0;const r=n(i(398));class o{constructor(e,t){this._disposables=[],this._isWatching=!1,this._lastUpdateTime=new Date,this._configManager=e,this._fileDetector=t,this._statusBarItem=r.window.createStatusBarItem(r.StatusBarAlignment.Right,100),this._statusBarItem.command="mcp-config-manager.openPanel",this._statusBarItem.tooltip="MCP配置管理器",this.updateStatus(),this.setupEventListeners()}setupEventListeners(){this._disposables.push(r.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("mcp-config-manager")&&this.updateStatus()})),this._disposables.push(r.workspace.onDidSaveTextDocument(e=>{this.isMCPConfigFile(e.fileName)&&this.updateStatus()})),this._disposables.push(r.workspace.onDidChangeWorkspaceFolders(()=>{this.updateStatus()}))}isMCPConfigFile(e){const t=e.toLowerCase();return t.includes("mcp")&&t.endsWith(".json")}async updateStatus(){try{const e=await this._configManager.getConfig(),t=this.getServiceCount(e),i=await this.getConfigStatus(e);this._statusBarItem.text=this.formatStatusText(t,i),this._statusBarItem.tooltip=await this.formatTooltip(e,i),this._statusBarItem.color=this.getStatusColor(i),this._statusBarItem.show(),this._lastUpdateTime=new Date}catch(e){console.error("更新状态栏失败:",e),this.showErrorStatus()}}getServiceCount(e){return e&&e.mcpServers?Object.keys(e.mcpServers).length:0}async getConfigStatus(e){if(!e)return"no-config";try{const t=await this._configManager.validateConfig(e);return t.isValid?t.warnings&&t.warnings.length>0?"warning":"valid":"invalid"}catch{return"error"}}formatStatusText(e,t){const i=this.getStatusIcon(t);return 0===e?`${i} MCP`:`${i} MCP (${e})`}getStatusIcon(e){switch(e){case"valid":return"$(check)";case"warning":return"$(warning)";case"invalid":case"error":return"$(error)";case"no-config":return"$(circle-outline)";default:return"$(question)"}}getStatusColor(e){switch(e){case"valid":return"statusBarItem.foreground";case"warning":return"statusBarItem.warningForeground";case"invalid":case"error":return"statusBarItem.errorForeground";case"no-config":return"statusBarItem.prominentForeground";default:return}}async formatTooltip(e,t){const i=["MCP配置管理器"];if(i.push(""),i.push(`状态: ${this.getStatusDescription(t)}`),e){const t=this.getServiceCount(e);if(i.push(`服务数量: ${t}`),t>0){const t=Object.keys(e.mcpServers||{});i.push(""),i.push("服务列表:"),t.slice(0,5).forEach(e=>{i.push(`  • ${e}`)}),t.length>5&&i.push(`  ... 还有 ${t.length-5} 个服务`)}}const s=this._configManager.getConfigPath();return i.push(""),i.push(`配置文件: ${s||"未设置"}`),i.push(`最后更新: ${this._lastUpdateTime.toLocaleTimeString()}`),this._isWatching&&i.push("文件监控: 已启用"),i.push(""),i.push("点击打开配置管理器"),i.join("\n")}getStatusDescription(e){switch(e){case"valid":return"配置有效";case"warning":return"配置有警告";case"invalid":return"配置无效";case"error":return"配置错误";case"no-config":return"无配置文件";default:return"未知状态"}}showErrorStatus(){this._statusBarItem.text="$(error) MCP",this._statusBarItem.tooltip="MCP配置管理器\n状态: 错误\n点击打开配置管理器",this._statusBarItem.color="statusBarItem.errorForeground",this._statusBarItem.show()}setWatchingStatus(e){this._isWatching=e,this.updateStatus()}showTemporaryMessage(e,t=3e3){const i=this._statusBarItem.text,s=this._statusBarItem.tooltip;this._statusBarItem.text=e,this._statusBarItem.tooltip=e,setTimeout(()=>{this._statusBarItem.text=i,this._statusBarItem.tooltip=s},t)}showProgress(e){this._statusBarItem.text=`$(sync~spin) ${e}`,this._statusBarItem.tooltip=`MCP配置管理器\n${e}`}hide(){this._statusBarItem.hide()}show(){this._statusBarItem.show()}async refresh(){this.showProgress("刷新中..."),await this.updateStatus()}async showQuickActions(){const e=await this._configManager.getConfig(),t=this.getServiceCount(e),i=[{label:"$(home) 打开配置管理器",description:"打开主面板",detail:"管理MCP服务和配置"},{label:"$(file-add) 创建配置文件",description:"创建新的MCP配置文件",detail:"在当前工作区创建配置文件"},{label:"$(search) 检测配置文件",description:"自动检测MCP配置文件",detail:"扫描工作区中的配置文件"}];e&&i.push({label:"$(check) 验证配置",description:"验证当前配置",detail:`验证 ${t} 个服务的配置`},{label:"$(file-text) 打开配置文件",description:"在编辑器中打开",detail:this._configManager.getConfigPath()||"未设置"}),i.push({label:"$(clippy) 从剪贴板添加",description:"从剪贴板添加服务",detail:"解析剪贴板中的配置或服务"},{label:"$(copy) 导出到剪贴板",description:"复制配置到剪贴板",detail:"将当前配置复制到剪贴板"},{label:"$(refresh) 刷新状态",description:"刷新状态栏信息",detail:"重新检查配置状态"});const s=await r.window.showQuickPick(i,{title:"MCP配置管理器",placeHolder:"选择操作"});s&&await this.executeQuickAction(s.label)}async executeQuickAction(e){switch(!0){case e.includes("打开配置管理器"):await r.commands.executeCommand("mcp-config-manager.openPanel");break;case e.includes("创建配置文件"):await r.commands.executeCommand("mcp-config-manager.createConfigFile");break;case e.includes("检测配置文件"):await r.commands.executeCommand("mcp-config-manager.detectMCPFiles");break;case e.includes("验证配置"):await r.commands.executeCommand("mcp-config-manager.validateConfigFile");break;case e.includes("打开配置文件"):await r.commands.executeCommand("mcp-config-manager.openConfigFile");break;case e.includes("从剪贴板添加"):await r.commands.executeCommand("mcp-config-manager.addServiceFromClipboard");break;case e.includes("导出到剪贴板"):await r.commands.executeCommand("mcp-config-manager.exportToClipboard");break;case e.includes("刷新状态"):await this.refresh()}}dispose(){this._statusBarItem.dispose(),this._disposables.forEach(e=>e.dispose()),this._disposables=[]}}t.StatusBarProvider=o,t.default=o},857:e=>{e.exports=require("os")},896:e=>{e.exports=require("fs")},903:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CommandManager=void 0;const r=n(i(398)),o=i(273),c=i(264);class l{constructor(e,t,i,s){this.disposables=[],this.context=e,this.mcpProvider=t,this.configManager=i,this.fileDetector=s,this.jsonParser=new o.JsonParser,this.configMerger=new c.ConfigMerger(i)}registerCommands(){this.registerCommand("mcp-config-manager.openPanel",()=>this.openPanel()),this.registerCommand("mcp-config-manager.addService",()=>this.addService()),this.registerCommand("mcp-config-manager.editService",e=>this.editService(e)),this.registerCommand("mcp-config-manager.deleteService",e=>this.deleteService(e)),this.registerCommand("mcp-config-manager.toggleService",e=>this.toggleService(e)),this.registerCommand("mcp-config-manager.mergeConfigs",()=>this.mergeConfigs()),this.registerCommand("mcp-config-manager.validateConfig",()=>this.validateConfig()),this.registerCommand("mcp-config-manager.backupConfig",()=>this.backupConfig()),this.registerCommand("mcp-config-manager.restoreConfig",()=>this.restoreConfig()),this.registerCommand("mcp-config-manager.detectFiles",()=>this.detectFiles()),this.registerCommand("mcp-config-manager.refreshDetection",()=>this.refreshDetection()),this.registerCommand("mcp-config-manager.importFromClipboard",()=>this.importFromClipboard()),this.registerCommand("mcp-config-manager.exportConfig",()=>this.exportConfig()),this.registerCommand("mcp-config-manager.importConfig",()=>this.importConfig()),this.registerCommand("mcp-config-manager.openSettings",()=>this.openSettings()),this.registerCommand("mcp-config-manager.resetSettings",()=>this.resetSettings()),this.registerCommand("mcp-config-manager.addServiceFromFile",e=>this.addServiceFromFile(e)),this.registerCommand("mcp-config-manager.openConfigFile",e=>this.openConfigFile(e)),console.log("MCP配置管理器命令已注册")}registerCommand(e,t){const i=r.commands.registerCommand(e,t);this.disposables.push(i),this.context.subscriptions.push(i)}async openPanel(){try{await this.mcpProvider.show()}catch(e){r.window.showErrorMessage(`打开面板失败: ${e}`)}}async addService(){try{const e=await r.window.showInputBox({prompt:"请输入服务ID",placeHolder:"例如: my-service",validateInput:e=>e&&e.trim()?/^[a-zA-Z0-9_-]+$/.test(e)?null:"服务ID只能包含字母、数字、下划线和连字符":"服务ID不能为空"});if(!e)return;const t=await r.window.showInputBox({prompt:"请输入命令",placeHolder:"例如: node, python, ./script.sh",validateInput:e=>e&&e.trim()?null:"命令不能为空"});if(!t)return;const i=await r.window.showInputBox({prompt:"请输入参数（用空格分隔，可选）",placeHolder:"例如: --port 3000 --verbose"}),s=i?i.split(" ").filter(e=>e.trim()):[],a={command:t.trim(),args:s,env:{},disabled:!1},n=this.configManager.getConfigPath()||"mcp.json";await this.configManager.addService(n,e.trim(),a),await this.mcpProvider.refresh(),r.window.showInformationMessage(`服务 "${e}" 添加成功`)}catch(e){r.window.showErrorMessage(`添加服务失败: ${e}`)}}async editService(e){try{await this.mcpProvider.show(),await this.mcpProvider.postMessage({type:"editService",serviceId:e})}catch(e){r.window.showErrorMessage(`编辑服务失败: ${e}`)}}async deleteService(e){try{if("删除"===await r.window.showWarningMessage(`确定要删除服务 "${e}" 吗？`,{modal:!0},"删除")){const t=this.configManager.getConfigPath()||"mcp.json";await this.configManager.removeService(t,e),await this.mcpProvider.refresh(),r.window.showInformationMessage(`服务 "${e}" 删除成功`)}}catch(e){r.window.showErrorMessage(`删除服务失败: ${e}`)}}async toggleService(e){try{const t=this.configManager.getConfigPath()||"mcp.json",i=await this.configManager.readConfig(t);if(!i||!i.mcpServers[e])throw new Error(`服务 "${e}" 不存在`);const s=i.mcpServers[e],a={...s,disabled:!s.disabled};await this.configManager.updateService(t,e,a),await this.mcpProvider.refresh();const n=a.disabled?"禁用":"启用";r.window.showInformationMessage(`服务 "${e}" 已${n}`)}catch(e){r.window.showErrorMessage(`切换服务状态失败: ${e}`)}}async mergeConfigs(){try{const e=(await this.fileDetector.detectFiles()).files||[];if(0===e.length)return void r.window.showInformationMessage("未检测到其他配置文件");const t=await this.selectFilesToMerge(e);if(!t||0===t.length)return;const i=[];for(const e of t)try{const t=await r.workspace.fs.readFile(r.Uri.file(e.path)),s=Buffer.from(t).toString("utf8"),a=this.jsonParser.parseConfig(s);i.push(a)}catch(t){console.warn(`读取配置文件失败: ${e.path}`,t)}if(0===i.length)return void r.window.showWarningMessage("没有有效的配置文件可以合并");const s=await this.configManager.readConfig(this.configManager.getConfigPath()||"mcp.json"),a=await this.configMerger.mergeConfigs(i[0],s,{strategy:"merge",preserveMetadata:!0,createBackup:!0,validateResult:!0});a.conflicts.length>0?(await this.mcpProvider.show(),await this.mcpProvider.postMessage({type:"showConflicts",conflicts:a.conflicts,mergedConfig:a.config})):(a.config&&await this.configManager.writeConfig(this.configManager.getConfigPath()||"mcp.json",a.config),await this.mcpProvider.refresh(),r.window.showInformationMessage("配置合并成功"))}catch(e){r.window.showErrorMessage(`合并配置失败: ${e}`)}}async selectFilesToMerge(e){const t=e.map(e=>({label:e.name,description:e.path,detail:`置信度: ${Math.round(100*e.confidence)}%`,file:e})),i=await r.window.showQuickPick(t,{canPickMany:!0,placeHolder:"选择要合并的配置文件"});return i?.map(e=>e.file)}async validateConfig(){try{const e=await this.configManager.validateConfig();if(e.isValid)r.window.showInformationMessage("配置验证通过");else{const t=e.errors.length,i=e.warnings.length;let s="配置验证失败";t>0&&(s+=`: ${t} 个错误`),i>0&&(s+=`, ${i} 个警告`),"查看详情"===await r.window.showWarningMessage(s,"查看详情")&&(await this.mcpProvider.show(),await this.mcpProvider.postMessage({type:"showValidation",result:e}))}}catch(e){r.window.showErrorMessage(`验证配置失败: ${e}`)}}async backupConfig(){try{this.configManager.getConfigPath(),Date.now(),r.window.showInformationMessage("配置备份功能暂未实现")}catch(e){r.window.showErrorMessage(`备份配置失败: ${e}`)}}async restoreConfig(){try{r.window.showInformationMessage("配置恢复功能暂未实现")}catch(e){r.window.showErrorMessage(`恢复配置失败: ${e}`)}}async detectFiles(){try{const e=(await this.fileDetector.detectFiles()).files||[];if(0===e.length)return void r.window.showInformationMessage("未检测到MCP配置文件");await this.mcpProvider.show(),await this.mcpProvider.postMessage({type:"showDetectedFiles",files:e})}catch(e){r.window.showErrorMessage(`检测文件失败: ${e}`)}}async refreshDetection(){try{r.window.showInformationMessage("检测缓存已刷新"),await this.detectFiles()}catch(e){r.window.showErrorMessage(`刷新检测失败: ${e}`)}}async importFromClipboard(){try{const e=await r.env.clipboard.readText();if(!e.trim())return void r.window.showWarningMessage("剪贴板为空");const t=this.jsonParser.parseClipboard(e);if(t.config)"导入"===await r.window.showInformationMessage("检测到完整配置，是否导入？","导入","取消")&&(await this.configManager.updateConfig(t.config),await this.mcpProvider.refresh(),r.window.showInformationMessage("配置导入成功"));else if(t.services&&t.services.length>0){const e=await r.window.showInputBox({prompt:"请输入服务ID",placeHolder:"例如: my-service"});if(e){const i=this.configManager.getConfigPath()||"mcp.json";await this.configManager.addService(i,e,t.services[0]),await this.mcpProvider.refresh(),r.window.showInformationMessage(`服务 "${e}" 导入成功`)}}else r.window.showWarningMessage("剪贴板内容不是有效的MCP配置或服务")}catch(e){r.window.showErrorMessage(`从剪贴板导入失败: ${e}`)}}async exportConfig(){try{const e=await this.configManager.getConfig();if(!e)return void r.window.showWarningMessage("没有可导出的配置");const t=JSON.stringify(e,null,2);await r.env.clipboard.writeText(t),r.window.showInformationMessage("配置已复制到剪贴板")}catch(e){r.window.showErrorMessage(`导出配置失败: ${e}`)}}async importConfig(){try{const e=await r.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{JSON文件:["json"],所有文件:["*"]}});if(!e||0===e.length)return;const t=await r.workspace.fs.readFile(e[0]),i=Buffer.from(t).toString("utf8"),s=this.jsonParser.parseConfig(i);"导入"===await r.window.showInformationMessage("确定要导入此配置吗？当前配置将被覆盖。",{modal:!0},"导入","取消")&&(await this.configManager.updateConfig(s),await this.mcpProvider.refresh(),r.window.showInformationMessage("配置导入成功"))}catch(e){r.window.showErrorMessage(`导入配置失败: ${e}`)}}async openSettings(){try{await this.mcpProvider.show(),await this.mcpProvider.postMessage({type:"showSettings"})}catch(e){r.window.showErrorMessage(`打开设置失败: ${e}`)}}async resetSettings(){try{if("重置"===await r.window.showWarningMessage("确定要重置所有设置吗？",{modal:!0},"重置")){const e=r.workspace.getConfiguration("mcp-config-manager");await e.update("autoDetect",void 0,r.ConfigurationTarget.Global),await e.update("fileWatcher",void 0,r.ConfigurationTarget.Global),await e.update("autoBackup",void 0,r.ConfigurationTarget.Global),await e.update("backupRetentionDays",void 0,r.ConfigurationTarget.Global),await e.update("defaultMergeStrategy",void 0,r.ConfigurationTarget.Global),await e.update("detectionPaths",void 0,r.ConfigurationTarget.Global),await e.update("excludePatterns",void 0,r.ConfigurationTarget.Global),r.window.showInformationMessage("设置已重置")}}catch(e){r.window.showErrorMessage(`重置设置失败: ${e}`)}}async addServiceFromFile(e){try{const t=await r.window.showInputBox({prompt:"请输入服务ID",placeHolder:"例如: my-service"});if(!t)return;const i={command:e.fsPath,args:[],env:{},disabled:!1},s=this.configManager.getConfigPath()||"mcp.json";await this.configManager.addService(s,t,i),await this.mcpProvider.refresh(),r.window.showInformationMessage(`服务 "${t}" 添加成功`)}catch(e){r.window.showErrorMessage(`从文件添加服务失败: ${e}`)}}async openConfigFile(e){try{await r.window.showTextDocument(e)}catch(e){r.window.showErrorMessage(`打开配置文件失败: ${e}`)}}dispose(){this.disposables.forEach(e=>e.dispose()),this.disposables=[]}}t.CommandManager=l,t.default=l},906:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorHandler=t.ErrorSeverity=t.ErrorType=void 0;const r=n(i(398)),o=i(216);var c,l;!function(e){e.VALIDATION="validation",e.FILE_IO="file_io",e.NETWORK="network",e.PARSING="parsing",e.CONFIGURATION="configuration",e.PERMISSION="permission",e.UNKNOWN="unknown"}(c=t.ErrorType||(t.ErrorType={})),function(e){e.LOW="low",e.MEDIUM="medium",e.HIGH="high",e.CRITICAL="critical"}(l=t.ErrorSeverity||(t.ErrorSeverity={})),t.ErrorHandler=class{constructor(e){this.errorHistory=[],this.maxHistorySize=100,this.retryAttempts=new Map,this.notificationManager=e,this.settings=this.loadSettings()}loadSettings(){const e=r.workspace.getConfiguration("mcpManager.errorHandling");return{enableErrorReporting:e.get("enableErrorReporting",!0),enableAutoRetry:e.get("enableAutoRetry",!0),maxRetryAttempts:e.get("maxRetryAttempts",3),retryDelay:e.get("retryDelay",1e3),enableDetailedLogging:e.get("enableDetailedLogging",!1)}}async handleError(e,t=c.UNKNOWN,i=l.MEDIUM,s={}){const a=this.createErrorInfo(e,t,i);this.addToHistory(a);const n={showNotification:!0,logToConsole:!0,logToFile:!1,includeStack:this.settings.enableDetailedLogging,suggestActions:!0,autoRetry:this.settings.enableAutoRetry,retryCount:this.settings.maxRetryAttempts,retryDelay:this.settings.retryDelay,...s};n.logToConsole&&this.logToConsole(a,n.includeStack),n.showNotification&&this.settings.enableErrorReporting&&await this.showErrorNotification(a,n)}createErrorInfo(e,t,i){const s="string"==typeof e?e:e.message,a="object"==typeof e?e.stack:void 0;return{type:t,severity:i,message:s,timestamp:Date.now(),stack:a,code:this.extractErrorCode(e),source:this.extractErrorSource(e)}}extractErrorCode(e){if("object"==typeof e&&"code"in e)return e.code}extractErrorSource(e){if("object"==typeof e&&e.stack){const t=e.stack.split("\n");if(t.length>1){const e=t[1].match(/at\s+(.+?)\s+\((.+?)\)/);if(e)return`${e[1]} (${e[2]})`}}}logToConsole(e,t=!1){const i=`[MCP Manager ${e.severity.toUpperCase()}] ${e.type}: ${e.message}`;switch(e.severity){case l.LOW:console.info(i);break;case l.MEDIUM:console.warn(i);break;case l.HIGH:case l.CRITICAL:console.error(i)}t&&e.stack&&console.error("Stack trace:",e.stack),e.context&&console.error("Context:",e.context)}async showErrorNotification(e,t){const i=this.getNotificationType(e.severity),s=t.suggestActions?this.getSuggestedActions(e):[],a=await this.notificationManager.showNotification({type:i,message:this.formatErrorMessage(e),actions:s});a.action&&await this.handleErrorAction(a.action,e,t)}getNotificationType(e){switch(e){case l.LOW:return o.NotificationType.INFO;case l.MEDIUM:return o.NotificationType.WARNING;case l.HIGH:case l.CRITICAL:return o.NotificationType.ERROR;default:return o.NotificationType.WARNING}}formatErrorMessage(e){let t=e.message;return e.type!==c.UNKNOWN&&(t=`${this.getErrorTypeDisplayName(e.type)}: ${t}`),e.code&&(t+=` (错误代码: ${e.code})`),t}getErrorTypeDisplayName(e){return{[c.VALIDATION]:"验证错误",[c.FILE_IO]:"文件操作错误",[c.NETWORK]:"网络错误",[c.PARSING]:"解析错误",[c.CONFIGURATION]:"配置错误",[c.PERMISSION]:"权限错误",[c.UNKNOWN]:"未知错误"}[e]||"未知错误"}getSuggestedActions(e){const t=[];switch(e.type){case c.VALIDATION:t.push("查看详情","修复配置");break;case c.FILE_IO:t.push("重试","检查权限","选择其他文件");break;case c.NETWORK:t.push("重试","检查网络连接");break;case c.PARSING:t.push("查看详情","修复格式");break;case c.CONFIGURATION:t.push("重置配置","查看帮助");break;case c.PERMISSION:t.push("检查权限","以管理员身份运行");break;default:t.push("重试","查看详情")}return t.push("忽略"),t}async handleErrorAction(e,t,i){switch(e){case"重试":await this.handleRetry(t,i);break;case"查看详情":await this.showErrorDetails(t);break;case"修复配置":r.commands.executeCommand("mcpManager.openPanel");break;case"检查权限":await this.showPermissionHelp();break;case"重置配置":await this.showResetConfigDialog();break;case"查看帮助":await this.showHelp(t.type)}}async handleRetry(e,t){const i=`${e.type}_${e.message}`,s=this.retryAttempts.get(i)||0;s>=(t.retryCount||3)?await this.notificationManager.showNotification({type:o.NotificationType.ERROR,message:"已达到最大重试次数，请检查问题后手动重试"}):(this.retryAttempts.set(i,s+1),setTimeout(()=>{r.commands.executeCommand("mcpManager.refreshServices")},t.retryDelay||1e3))}async showErrorDetails(e){const t=[`错误类型: ${this.getErrorTypeDisplayName(e.type)}`,`严重程度: ${e.severity}`,`时间: ${new Date(e.timestamp).toLocaleString()}`,`消息: ${e.message}`];e.code&&t.push(`错误代码: ${e.code}`),e.source&&t.push(`来源: ${e.source}`),e.stack&&this.settings.enableDetailedLogging&&t.push(`堆栈跟踪:\n${e.stack}`);const i=t.join("\n");"复制到剪贴板"===(await this.notificationManager.showNotification({type:o.NotificationType.INFO,message:"错误详情",actions:["复制到剪贴板","关闭"],modal:!0})).action&&(await r.env.clipboard.writeText(i),await this.notificationManager.showNotification({type:o.NotificationType.SUCCESS,message:"错误详情已复制到剪贴板"}))}async showPermissionHelp(){const e=["权限问题可能的解决方案:","1. 检查文件和目录的读写权限","2. 确保VS Code有足够的权限访问文件","3. 尝试以管理员身份运行VS Code","4. 检查文件是否被其他程序占用"].join("\n");await this.notificationManager.showNotification({type:o.NotificationType.INFO,message:e,modal:!0})}async showResetConfigDialog(){await this.notificationManager.showConfirmDialog("确定要重置MCP配置吗？这将清除所有当前配置。","重置","取消")&&r.commands.executeCommand("mcpManager.resetConfig")}async showHelp(e){const t={[c.VALIDATION]:"https://example.com/help/validation",[c.FILE_IO]:"https://example.com/help/file-io",[c.NETWORK]:"https://example.com/help/network",[c.PARSING]:"https://example.com/help/parsing",[c.CONFIGURATION]:"https://example.com/help/configuration",[c.PERMISSION]:"https://example.com/help/permission",[c.UNKNOWN]:"https://example.com/help/general"}[e];t&&"打开"===(await this.notificationManager.showNotification({type:o.NotificationType.INFO,message:"是否要打开帮助文档？",actions:["打开","取消"]})).action&&r.env.openExternal(r.Uri.parse(t))}addToHistory(e){this.errorHistory.push(e),this.errorHistory.length>this.maxHistorySize&&this.errorHistory.shift()}getErrorHistory(){return[...this.errorHistory]}clearErrorHistory(){this.errorHistory.length=0,this.retryAttempts.clear()}getErrorStatistics(){const e=Date.now()-864e5,t={[c.VALIDATION]:0,[c.FILE_IO]:0,[c.NETWORK]:0,[c.PARSING]:0,[c.CONFIGURATION]:0,[c.PERMISSION]:0,[c.UNKNOWN]:0},i={[l.LOW]:0,[l.MEDIUM]:0,[l.HIGH]:0,[l.CRITICAL]:0};let s=0;for(const a of this.errorHistory)t[a.type]++,i[a.severity]++,a.timestamp>e&&s++;return{total:this.errorHistory.length,byType:t,bySeverity:i,recent:s}}updateSettings(e){this.settings={...this.settings,...e}}dispose(){this.errorHistory.length=0,this.retryAttempts.clear()}}},928:e=>{e.exports=require("path")},956:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,a)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&s(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FeedbackManager=t.FeedbackType=void 0;const r=n(i(398)),o=i(216);var c;!function(e){e.SUCCESS="success",e.INFO="info",e.WARNING="warning",e.ERROR="error",e.PROGRESS="progress",e.CONFIRMATION="confirmation",e.INPUT="input"}(c=t.FeedbackType||(t.FeedbackType={})),t.FeedbackManager=class{constructor(e,t){this.interactionState=null,this.feedbackHistory=[],this.progressReporters=new Map,this.notificationManager=e,this.errorHandler=t,this.settings=this.loadSettings()}loadSettings(){const e=r.workspace.getConfiguration("mcpManager.feedback");return{enableFeedbackCollection:e.get("enableCollection",!0),enableUsageAnalytics:e.get("enableAnalytics",!1),feedbackTimeout:e.get("timeout",5e3),maxHistorySize:e.get("maxHistorySize",100),enableHapticFeedback:e.get("enableHaptic",!1),enableSoundFeedback:e.get("enableSound",!1)}}async showSuccess(e,t,i){const s={type:c.SUCCESS,title:e,message:t,actions:i,timeout:this.settings.feedbackTimeout};return this.showFeedback(s)}async showInfo(e,t,i){const s={type:c.INFO,title:e,message:t,actions:i};return this.showFeedback(s)}async showWarning(e,t,i){const s={type:c.WARNING,title:e,message:t,actions:i};return this.showFeedback(s)}async showError(e,t,i,s){i&&this.errorHandler.handleError(i);const a={type:c.ERROR,title:e,message:t,detail:i?.stack,actions:s||[{label:"查看详情",action:()=>this.showErrorDetails(i)},{label:"报告问题",action:()=>this.reportIssue(i,e,t)}]};return this.showFeedback(a)}async showConfirmation(e,t,i="确认",s="取消"){return new Promise(a=>{const n={type:c.CONFIRMATION,title:e,message:t,modal:!0,actions:[{label:i,action:()=>a(!0),isDefault:!0},{label:s,action:()=>a(!1)}]};this.showFeedback(n)})}async showInput(e,t,i,s){const a=await r.window.showInputBox({title:e,placeHolder:t,value:i,validateInput:s});return this.recordInteraction(c.INPUT,e,a?"用户输入":"用户取消"),a}async showProgress(e,t,i=!1){const s=`progress_${Date.now()}`;return r.window.withProgress({location:r.ProgressLocation.Notification,title:e,cancellable:i},async(i,a)=>{this.progressReporters.set(s,i);try{const s=await t(i,a);return this.recordInteraction(c.PROGRESS,e,"任务完成"),s}catch(t){throw this.recordInteraction(c.PROGRESS,e,"任务失败"),t}finally{this.progressReporters.delete(s)}})}async showValidationFeedback(e,t){if(e.isValid)return void await this.showSuccess("配置验证成功","所有配置项都通过了验证",t?[{label:"打开文件",action:async()=>{await r.window.showTextDocument(r.Uri.file(t))}}]:void 0);const i=e.errors.filter(e=>"error"===e.severity).length,s=e.warnings.length;let a=`发现 ${i} 个错误`;s>0&&(a+=` 和 ${s} 个警告`);const n=[{label:"查看详情",action:()=>this.showValidationDetails(e)}];t&&n.push({label:"打开文件",action:async()=>{await r.window.showTextDocument(r.Uri.file(t))}}),e.suggestions&&e.suggestions.length>0&&n.push({label:"查看建议",action:()=>this.showSuggestions(e.suggestions||[])}),await this.showError("配置验证失败",a,void 0,n)}async showServiceOperationFeedback(e,t,i,s){const a=`服务${e}`,n=`服务 "${t}" ${s||(i?"操作成功":"操作失败")}`;i?await this.showSuccess(a,n):await this.showError(a,n)}async showFileOperationFeedback(e,t,i,s){const a=`文件${e}`,n=`文件 "${t.split("/").pop()||t}" ${i?"操作成功":"操作失败"}`,o=[];i&&o.push({label:"打开文件",action:async()=>{await r.window.showTextDocument(r.Uri.file(t))}}),i?await this.showSuccess(a,n,o):await this.showError(a,n,s,o)}async showFeedback(e){const t=Date.now();this.interactionState={isActive:!0,type:e.type,startTime:t,context:e};try{let i;switch(e.type){case c.SUCCESS:const t=await this.notificationManager.showNotification({type:o.NotificationType.INFO,message:`${e.title}: ${e.message}`,actions:e.actions?.map(e=>e.label)});i=t.action;break;case c.INFO:const s=await this.notificationManager.showNotification({type:o.NotificationType.INFO,message:`${e.title}: ${e.message}`,actions:e.actions?.map(e=>e.label)});i=s.action;break;case c.WARNING:const a=await this.notificationManager.showNotification({type:o.NotificationType.WARNING,message:`${e.title}: ${e.message}`,actions:e.actions?.map(e=>e.label)});i=a.action;break;case c.ERROR:const n=await this.notificationManager.showNotification({type:o.NotificationType.ERROR,message:`${e.title}: ${e.message}`,actions:e.actions?.map(e=>e.label)});i=n.action;break;case c.CONFIRMATION:if(e.modal){const t=await r.window.showWarningMessage(`${e.title}: ${e.message}`,{modal:!0},...e.actions?.map(e=>e.label)||[]);i=t}}if(i&&e.actions){const t=e.actions.find(e=>e.label===i);t&&await t.action()}return this.recordInteraction(e.type,e.title,i||"无响应",Date.now()-t),i}finally{this.interactionState=null}}async showErrorDetails(e){if(!e)return;const t=await r.workspace.openTextDocument({content:`错误详情:\n\n${e.message}\n\n堆栈跟踪:\n${e.stack}`,language:"plaintext"});await r.window.showTextDocument(t)}async reportIssue(e,t,i){const s=`\n## 问题描述\n${t}: ${i}\n\n## 错误信息\n${e?.message||"无"}\n\n## 堆栈跟踪\n\`\`\`\n${e?.stack||"无"}\n\`\`\`\n\n## 环境信息\n- VS Code版本: ${r.version}\n- 操作系统: ${process.platform}\n- 扩展版本: [请填写]\n`,a=`https://github.com/your-repo/issues/new?body=${encodeURIComponent(s)}`;await r.env.openExternal(r.Uri.parse(a))}async showValidationDetails(e){const t=this.formatValidationResult(e),i=await r.workspace.openTextDocument({content:t,language:"plaintext"});await r.window.showTextDocument(i)}async showSuggestions(e){const t=`修复建议:\n\n${e.map((e,t)=>`${t+1}. ${e}`).join("\n")}`,i=await r.workspace.openTextDocument({content:t,language:"plaintext"});await r.window.showTextDocument(i)}formatValidationResult(e){let t="配置验证结果\n\n";return e.errors.length>0&&(t+="错误:\n",e.errors.forEach((e,i)=>{t+=`${i+1}. [${e.field}] ${e.message}\n`,e.suggestion&&(t+=`   建议: ${e.suggestion}\n`)}),t+="\n"),e.warnings.length>0&&(t+="警告:\n",e.warnings.forEach((e,i)=>{t+=`${i+1}. [${e.field}] ${e.message}\n`,e.suggestion&&(t+=`   建议: ${e.suggestion}\n`)}),t+="\n"),e.suggestions&&e.suggestions.length>0&&(t+="修复建议:\n",e.suggestions.forEach((e,i)=>{t+=`${i+1}. ${e}\n`})),t}recordInteraction(e,t,i,s=0){if(!this.settings.enableFeedbackCollection)return;const a={timestamp:Date.now(),type:e,title:t,message:t,userAction:i,duration:s};this.feedbackHistory.push(a),this.feedbackHistory.length>this.settings.maxHistorySize&&(this.feedbackHistory=this.feedbackHistory.slice(-this.settings.maxHistorySize))}getInteractionState(){return this.interactionState}getFeedbackHistory(){return[...this.feedbackHistory]}clearFeedbackHistory(){this.feedbackHistory=[]}getUsageStatistics(){if(!this.settings.enableUsageAnalytics)return null;const e={totalInteractions:this.feedbackHistory.length,interactionsByType:{},averageResponseTime:0,mostCommonActions:{}};let t=0;for(const i of this.feedbackHistory)e.interactionsByType[i.type]=(e.interactionsByType[i.type]||0)+1,t+=i.duration,i.userAction&&(e.mostCommonActions[i.userAction]=(e.mostCommonActions[i.userAction]||0)+1);return e.averageResponseTime=this.feedbackHistory.length>0?t/this.feedbackHistory.length:0,e}updateSettings(e){this.settings={...this.settings,...e}}getSettings(){return{...this.settings}}dispose(){this.progressReporters.clear(),this.feedbackHistory=[],this.interactionState=null}}}},t={},i=function i(s){var a=t[s];if(void 0!==a)return a.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}(265);module.exports=i})();
//# sourceMappingURL=extension.js.map